library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
gene<-as.character(values(tssgr[i])$GENEID)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=4*k*U0/(rho*beta*H*r)
vmax
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=k*U0*pi/(rho*beta*H*L)
vmax
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=k*U0*pi/(rho*beta*H*L)
vmax
vmax*50
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
system.time( lapply(1:8, function(x)Sys.sleep(1) ) )
system.time( lapply(1:16, function(x)Sys.sleep(1) ) )
system.time( lapply(1:4, function(x)Sys.sleep(1) ) )
detect.cores()
library(parallel)
detectCores()
mc.cores()
?"options"
?"parallel"
options(mc.cores=4)
system.time( mclapply(1:8, function(x)Sys.sleep(1) ) )
options(mc.cores=2)
system.time( mclapply(1:8, function(x)Sys.sleep(1) ) )
BiocParallel::bpparam()
library(BiocParallel)
bpparam()
32/15
library(BatchJobs)  # sequential by default
reg1 = makeRegistry("tmp1", packages=c("RNAseqData.HNRNPC.bam.chr14", "GenomicAlignments", "Rsamtools"))
library(RNAseqData.HNRNPC.bam.chr14)
fns = RNAseqData.HNRNPC.bam.chr14_BAMFILES
batchMap(reg1, readGAlignments, fns)
submitJobs(reg1, 1)
waitForJobs(reg1)
length(loadResult(reg1, 1))
length(loadResult(reg1, 1))
submitJobs(reg1, findNotDone(reg1))
waitForJobs(reg1)
getJobInfo(reg1)
getJobInfo(reg1)$memory
getJobInfo(reg1)
median(getJobInfo(reg1)$memory)
lens = reduceResults( reg1, fun= function(aggr, job, res)
c(aggr, length(res)), init=NULL)
lens
sum(lens)
library(GO.db)
GO.db
keytypes(GO.db)
columns(GO.db)
class(GO.db)
getClass(class(GO.db))
getClass(class(GO.db))
con=GO.db$conn
con
library(DBI)
library(RSQLite)
dbListTables(con)
dbGetQuery(con,select * from go_term limit 5)
dbGetQuery(con,"select * from go_term limit 5")
library(GO.db)
con = GO.db$conn
dbGetQuery(con, "select count(*) from go_term")
dbGetQuery(GO.db$conn, "select term from go_term")
keys(GO.db, keytype="TERM")
library(microbenchmark)
m1 = microbenchmark(
dbGetQuery(GO.db$conn, "select term from go_term"), times=10L, unit="ms")
m2 = microbenchmark(
keys(GO.db, keytype="TERM"), times=10L, unit="ms")
biocLite("microbenchmark")
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("microbenchmark")
library(microbenchmark)
m1 = microbenchmark(
dbGetQuery(GO.db$conn, "select term from go_term"), times=10L, unit="ms")
m2 = microbenchmark(
keys(GO.db, keytype="TERM"), times=10L, unit="ms")
m1
m1$median
str(m1)
summary(m1)
m1[5]
m1[5,2]
median(m1$time)
median(m2$time)/median(m1$time)
summary(m2)[,"median"]/summary(m1)[,"median"]
library(RNAseqData.HNRNPC.bam.chr14)
library(GenomicAlignments)
library(ERBS)
data(GM12878)
seqlevels(GM12878, force=TRUE) = "chr14"
library(Rsamtools)
parm = ScanBamParam(which=GM12878)
tab = summarizeOverlaps( GM12878, RNAseqData.HNRNPC.bam.chr14_BAMFILES,
param=parm)
tab
sum(tab)
str(tab)
ranges(tab)
ranges(tab)[1:51]
summary(tab)
width(tab)
?summarizeOverlaps
parm
queryHits(tab)
RNAseqData.HNRNPC.bam.chr14_BAMFILES
parm
summary(parm)
ranges(parm)
tab
tab[,1]
colData(tab)
tab$ERR127306
tab[,2]
sum(tab[,2])
tab
str(tab)
score(tab)
seqnames(tab)
assays(tab)
assays(tab)[[1]]
assays(tab)[[1]][1,]
regions=1:51
regions
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
zeros
sum(zeros)
sum(apply(assay(tab),1,function(x)all(x==0)))
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
sum(zeros)
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
kk
class(kk)
?scanBam
mm
bf
tab[5]
rowRanges(tab)[5]
rowRanges(tab)[51]
rowRanges(tab)[52]
rowRanges(tab)[5]
mm
sum(apply(assay(tab)[5],1,function(x)sum(x)))
assay(tab[5])
kk
str(kk)
mean(kk$mapq)
kk$mapq
kk[[1]]$mapq
sum(assay(tab[5])
)
mean(kk[[1]]$mapq)
mm = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf[1], param=mm)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
assay(tab[30])
kk30[[1]]$mapq
kk30[1]$mapq
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
sum(assay(tab[5]))
mean(kk[[1]]$mapq)
kk
kk30
kk30[1]
kk30[2]
kk30[1][1]
kk30[1][2]
kk30[2][1]
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
bf[1]
assays(tab[5])
assay(tab[5])
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
assay(tab[5])[1]
mean(kk[[1]]$mapq)
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
assay(tab[30])[1]
mean(kk30[[1]]$mapq)
kk30
kk
countBam(bf[1], param=mm)
countBam(bf[1], param=mm30)
library(geuvPack)
library(VariantAnnotation)
gtpath
biocLite("geuvPack")
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
```
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
library(ph525x)
b1 = benchOOM()
library(BiocInstaller)
biocLite("rhdf5")
library(ph525x)
b1 = benchOOM()
biocLite("bigmemory")
library(ph525x)
library(rhdf5)
library(bigmemory)
b1 = benchOOM()
b1
b1
b1$wr
b1$meth[which.min(b1$wr)]
h22 = scanVcfHeader(gtpath(22))
h22
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
mean( h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4)))
h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4))
h5read("ex_hdf5file.h5", "x")
h22 = scanVcfHeader(gtpath(22))
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
help.start()
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
juxta = function (chrname="chr22", ...)
{
require(ERBS)
data(HepG2)
data(GM12878)
require(ggbio)
require(GenomicRanges)  # "subset" is overused, need import detail
ap1 = autoplot(GenomicRanges::subset(HepG2, seqnames==chrname))
ap2 = autoplot(GenomicRanges::subset(GM12878, seqnames==chrname))
tracks(HepG2 = ap1, Bcell = ap2, ...)
# alternative code for Gviz below
#    require(Gviz)
#    ap1 = AnnotationTrack(GenomicRanges::subset(HepG2, seqnames==chrname))
#    names(ap1) = "HepG2"
#    ap2 = AnnotationTrack(GenomicRanges::subset(GM12878, seqnames==chrname))
#    names(ap2) = "B-cell"
#    ax = GenomeAxisTrack()
#    plotTracks(list(ax, ap1, ap2))
}
library(ERBS)
juxta("chr22", main="ESRRA binding peaks on chr22")
library(ERBS)
juxta("chr2", main="ESRRA binding peaks on chr2")
?package.skeleton
package.skeleton("erbsViz",list=juxta")
package.skeleton("erbsViz",list="juxta")
package.skeleton("erbsViz",list="juxta")
getwd()
package.skeleton("erbsViz",list="juxta")
install.packages("erbsViz", repos=NULL, type="source")
install.packages("erbsViz", repos=NULL, type="source")
library(erbsViz)
jdemo = juxta()
class(jdemo)
class(jdemo)
getSlots(getClass(class(jdemo)))
getSlots(getClass("Tracks"))
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0", "me <me@abc.com>",
"me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
?makeOrganismPackage
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),
join2 = c(org.Ce.eg.db="ENTREZID",
TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(org.Ce.eg.db)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(OrganismDbi)
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
# gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
gd
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
gd
library(OrganismDbi)
library(OrganismDbi)
gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
join2 = c(org.Sc.sgd.db="ENTREZID",
TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
if (!file.exists("Sac.cer3")) # don't do twice...
makeOrganismPackage(pkgname="Sac.cer3",  # simplify typing!
graphData=gd, organism="Saccharomyces cerevisiae",
version="1.0.0", maintainer="Student <ph525x@harvardx.edu>",
author="Student <ph525x@harvardx.edu>",
destDir=".",
license="Artistic-2.0")
library(org.Sc.sgd.db)
biocLite(org.Sc.sgd.db)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("org.Ce.eg.db")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
# gd = list( join1 = c(GO.db="GOID", org.Sc.sgd.db="GO"),
#            join2 = c(org.Sc.sgd.db="ENTREZID",
#               TxDb.Scerevisiae.UCSC.sacCer3.sgdGene="GENEID"))
gd = list(join1 = c(GO.db="GOID", org.Ce.eg.db="GO"),join2 = c(org.Ce.eg.db="ENTREZID", TxDb.Celegans.UCSC.ce6.ensGene="GENEID"))
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
library(BiocInstaller)
biocLite("TxDb.Celegans.UCSC.ce6.ensGene")
library(OrganismDbi)
makeOrganismPackage("Cen.ele6", gd, "C. elegans", "1.0.0","me <me@abc.com>", "me <me@abc.com>", ".")
install.packages("Cen.ele6",
repos=NULL, type="source")
library(Cen.ele6)
sum(seqlengths(Cen.ele6))
R CMD check erbsViz
setwd("C:/Users/Mike/Rspace/PH525/7x/RNA-seq/Differential expression across isoforms")
source('~/.active-rstudio-document', echo=TRUE)
library(BiocInstaller)
biocLite("stringi")
biocLite("pasilla")
biocLite("DEXSeq")
source('~/.active-rstudio-document', echo=TRUE)
?DESeq
biocLite("DEXSeq2")
class(dxd2L)
dxd2L <- DESeq(dxd2L)
library(devtools)
install_github("Bioconductor-mirror/DESeq2")
dxd2L
design(dxd)
vignette("DEXSeq)")
dxd2L = estimateSizeFactors( dxd2L)
dxd2L = estimateDispersions( dxd2L )
dxd2L= testForDEU(dxd2L )
dxd2L = estimateExonFoldChanges( dxd2L, fitExpToVar="condition")
dxr2L = DEXSeqResults( dxd2L )
plotMA( dxr2L, cex=0.8 )
dxr2L = DEXSeqResults( dxd2L )
dxr2L
resSort<-res[order(res$padj),]
head(resSort)
dxr2Lres = DEXSeqResults( dxd2L )
plotMA( dxr2Lres, cex=0.8 )
resSort<-dxr2Lres[order(dxr2Lres$padj),]
head(resSort)
rownames(resSort[1,])
dxr = DEXSeqResults( dxd2L )
rownames(dxr)[ which.min(dxr$padj) ]
dxr = DEXSeqResults( dxd2L )
rownames(dxr)[ which.min(dxr$padj) ]
plotMA( dxr, cex=0.8 )
plotMA( dxr, cex=0.8 )
dxr = DEXSeqResults( dxd2L )
pAdjMinGene<-rownames(dxr)[ which.min(dxr$padj) ]
pAdjMinGene
plotDEXSeq( dxr, pAdjMinGene, displayTranscripts=TRUE, legend=TRUE,
cex.axis=1.2,cex=1.3,lwd=2,norCounts=TRUE,displayTranscripts=TRUE )
plotDEXSeq( dxr, pAdjMinGene, displayTranscripts=TRUE, legend=TRUE,
cex.axis=1.2,cex=1.3,lwd=2,norCounts=TRUE)
dxr = DEXSeqResults( dxd2L )
pAdjMinGene<-rownames(dxr)[ which.min(dxr$padj) ]
pAdjMinGene
plotDEXSeq( dxr, pAdjMinGene, displayTranscripts=TRUE, legend=TRUE,
cex.axis=1.2,cex=1.3,lwd=2,norCounts=TRUE)
plotDEXSeq( dxr, "FBgn0010909", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
plotDEXSeq( dxr, "FBgn0000256:E009", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
plotDEXSeq( dxr, "FBgn0000256", legend=TRUE, cex.axis=1.2, cex=1.3, lwd=2 )
sub(".*:", "", "FBgn0000256:E009")
sub(:.*", "", "FBgn0000256:E009")
sub(":.*", "", "FBgn0000256:E009")
dxr = DEXSeqResults( dxd2L )
pAdjMinGene<-rownames(dxr)[ which.min(dxr$padj) ]
pAdjMinGene<-sub(":.*", "", pAdjMinGene)
pAdjMinGene
dxr = DEXSeqResults( dxd2L )
pAdjMinGene<-rownames(dxr)[ which.min(dxr$padj) ]
pAdjMinGene<-sub(":.*", "", pAdjMinGene) # extract everyuthing up to the colon
pAdjMinGene
plotDEXSeq( dxr, pAdjMinGene, displayTranscripts=TRUE, legend=TRUE,
cex.axis=1.2,cex=1.3,lwd=2,norCounts=TRUE)
biocLite("stringi")
