g<-ggplot(data=dat,aes(x=x))+geom_histogram()
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=d))+geom_histogram()
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar()
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity")
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.5))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.2))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.2))
g
library(ggplot2)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col="red"))
g
library(ggplot2)
library(openintro)
data(COL)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[1]))
g
library(ggplot2)
library(openintro)
data(COL)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[7]))
g
library(ggplot2)
library(openintro)
data(COL)
dave<-0.7
carole<-0.6
size<-100
x<-seq(1,size)
dat<-data.frame(x,d=dbinom(x,size,dave),c=dbinom(x,size,carole))
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[22]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[1],fill=COL[1]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[2],fill=COL[2]))
g
g<-ggplot(data=dat,aes(x=x))+geom_bar(stat="bin",aes(width=0.4,col = COL[2],fill=COL[2]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="bin",aes(width=0.4,col = COL[2],fill=COL[2]))
g
library(ggplot2)
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[2],fill=COL[2]))
g
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,col = COL[7],fill=COL[7]))
g
?COL()
g<-ggplot(data=dat,aes(x=x,y=d))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],fill=COL[7]))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],fill=COL[7]))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7]))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],alpha=0.5))
g
g<-ggplot(data=dat,aes(x=x,y=d,fill=COL[7]))+geom_bar(stat="identity",aes(width=0.4,colour = COL[7],alpha=0.3))
g
?Rmarkdown
?markdown
knit_engines$set()
?cat
qnorm(-3.7,0,1.7)
pnorm(-3.7,0,1.7)
?swirl
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
?InstallCourses
install_from_swirl(Getting and Cleaning Data, dev = FALSE, mirror = "github")
install_from_swirl(Getting_and_Cleaning_Data, dev = FALSE, mirror = "github")
SWIRL()
swirl()
7/(200000/10000)
7/(10000/200000)
pi()
pi
pi * (6371e6)^2*0.0323/8130
pi * (6371e6)^2*0.0323/(0.7*8130)
pi * (6371e3)^2*0.0323/(0.7*8130)
4*pi * (6371e3)^2*0.0323/(0.7*8130)
(4)*pi * (6371e3)^2*0.0323/(0.7*8130))/1e9
(4*pi * (6371e3)^2*0.0323/(0.7*8130))/1e9
install.packages("circular")
library(circular)
source('~/.active-rstudio-document')
par(1,1)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?circular
?windrose
dir <- circular(runif(100, 0, 360), units="degrees")
mag <-  rgamma(100, 15)
sample <- data.frame(dir=dir, mag=mag)
par(mfrow=c(2,2))
res <- windrose(sample)
## we join two pedals and keep the same shrink (scale of the plot)
breaks <-circular(seq(0, 2 * pi, by = pi/6))
breaks <- breaks[-2]
windrose(sample, breaks=breaks, main="The same but with two pedals joined",
shrink=res$shrink)
dir <- circular(runif(100, 0, 360), units="degrees")
mag <-  rgamma(100, 15)
sample <- data.frame(dir=dir, mag=mag)
par(mfrow=c(1,1))
res <- windrose(sample)
library(openintro)
data(COL)
COL
res <- windrose(sample)
res <- windrose(sample,fill.col=c("#569BBD","#F05133"))
res <- windrose(sample,fill.col=c("#569BBDC0","#F05133C0"))
?Constants
5.67e-8 * 223^4
5.67e-8 * 255^4
0.4*1370/4
dweights1=c(30.23,8.94,29.56,19.69,12.16,15.47,8.4,8.78,15.76,14.15)
dweights2=c(14.4,21.09,16.51,16.41,20.15,16.09,13.48,10.62,11.28,14.27)
allweights=c(dweights1,dweights2)
summaary(allweights)
summary(allweights)
summary(dweights1)
summary(dweights2)
summary(allweights)
hist(allweights)
hist(allweights)
qqnorm(allweights)
qqline(allweights)
103/.6
.6*172
96*74
96*6
576*5
demo(plotmath)
demoPlotmath
demo(plotmath)
paste(expression(x %+-% y),"=",3)
expression(x %+-% y)
text(expression(x %+-% y))
sessionInfo()
library(Biobase)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
install_github("genomicsclass/ph525x")
library(devtools)
install_github("genomicsclass/ph525x")
source("http://www.bioconductor.org/biocLite.R")
library(BiocInstaller)
biocLite("Biobase")
biocLite("genefu")
library(devtools)
install_github("genomicsclass/ph525x")
install_github("genomicsclass/ph525x")
library(Biobase)
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(devtools)
library(IRanges)
install_github("genomicsclass/ph525x")
sessionInfo()
library(BiocInstaller)
biocLite("Homo.sapiens")
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("geuvPack")
setwd("H:/Rspace/PH525/7x/RNA-seq")
genes <- read.table("SRR1039508.genes.results", header=TRUE)
isoforms <- read.table("SRR1039508.isoforms.results", header=TRUE)
fpkm.per.gene <- split(isoforms$FPKM, isoforms$gene_id)
head(sapply(fpkm.per.gene, sum))
head(genes$FPKM)
str(genes)
head(isoforms)
table(isoforms$gene_id)
fpkm.per.gene
str(fpkm.per.gene)
str(isoforms)
# if not yet installed: install.packages("dplyr")
library(dplyr)
isoforms %>% group_by(gene_id) %>% summarize(sum = sum(FPKM))
install.packages("dplyr")
# if not yet installed: install.packages("dplyr")
library(dplyr)
isoforms %>% group_by(gene_id) %>% summarize(sum = sum(FPKM))
genes2 <- genes[genes$FPKM > 0,]
genes2$gene_id <- droplevels(genes2$gene_id)
isoforms2 <- isoforms[isoforms$gene_id %in% genes2$gene_id,]
isoforms2$gene_id <- droplevels(isoforms2$gene_id)
hist(genes$FKPM)
hist(genes$FPKM)
hist(log10(genes$FPKM+1))
hist(genes$FPKM,breaks=50)
hist(log10(genes$FPKM+1),breaks=50)
stopifnot(all(genes2$gene_id == levels(isoforms2$gene_id)))
str(genes2)
plot(genes2$effective_length,genes2$effective_count,log="xy")
plot(genes2$effective_length,genes2$expected_count,log="xy")
hist(genes2$FPKM,breaks=50)
hist(log10(genes2$FPKM+1),breaks=50)
summary(genes2$FPKM)
str(isoforms2)
# if not yet installed: install.packages("dplyr")
library(dplyr)
isoforms2 %>% group_by(gene_id) %>% summarize(max.iso = max(IsoPct))
hist(isoforms2$max.iso)
str(isoforms2)
hist(max.iso)
res<-isoforms2 %>% group_by(gene_id) %>% summarize(max.iso = max(IsoPct))
str(res)
hist(res$max.iso)
mean(res$iso>95)
mean(res$max.iso>95)
isoforms2 %>% group_by(gene_id) %>% summarize(max.iso = max(IsoPct)) %>% summarize(answer = mean(max.iso > 95))
max.iso = sapply(split(isoforms2$IsoPct, isoforms2$gene_id), max)
mean(max.iso > 95)
plot(res$max.iso,genes2$FPKM,log="y")
boxplot(split(log10(genes2$FPKM), cut(max.iso, 5)), xlab="max.iso", ylab="log10 FPKM")
num.iso <- as.numeric(table(isoforms2$gene_id))
plot(num.iso, max.iso)
barplot(table(num.iso))
barplot(table(num.iso[num.iso < 15]))
barplot(table(num.iso))
barplot(table(num.iso[num.iso < 15]))
str(genes2)
plot(genes2$FKPM,genes2$TPM)
summary(genes2)
plot(genes2$FKPM,genes2$TPM)
plot(genes2$FPKM,genes2$TPM)
identical(genes2$TPM,1e6*genes2$FPKM/sum(genes2$FPKM))
plot(genes2$TPM,1e6*genes2$FPKM/sum(genes2$FPKM))
abline(1)
plot(genes2$TPM,1e6*genes2$FPKM/sum(genes2$FPKM))
abline(1)
?abline
plot(genes2$TPM,1e6*genes2$FPKM/sum(genes2$FPKM))
abline(0,1)
biocVersion()
source("http://bioconductor.org/biocLite.R")
biocVersion()
biocLite()
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
library(BiocInstaller)
biocLite("TxDb.Dmelanogaster.UCSC.dm3.ensGene")
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
library(BiocInstaller)
biocLite("pasillaBamSubset")
library(Rsamtools)
rm(list=ls())
library(pasillaBamSubset)
bam.file <- untreated3_chr4()
library(Rsamtools)
bf <- BamFile(bam.file)
class(bf)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
exons.by.gene <- exonsBy(txdb, by="gene")
library(GenomicAlignments)
se <- summarizeOverlaps(exons.by.gene, bam.list,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE)
colData(se) <- DataFrame(sample.table)
library(GenomicAlignments)
library(GenomicAlignments)
se <- summarizeOverlaps(exons.by.gene, bf,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE)
colData(se) <- DataFrame(sample.table)
str(se)
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
txdb <- TxDb.Dmelanogaster.UCSC.dm3.ensGene
ebg <- exonsBy(txdb, by="gene")
library(GenomicAlignments)
se <- summarizeOverlaps(ebg, bf,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=TRUE)
#colData(se) <- DataFrame(sample.table)
summary(ebg)
genes(ebg)
class(ebg)
ebg[[1]]
ebg[[2]]
ebg[[3]]
ebg[[]]
ebg[[200]]
summary(ebg)
str(ebg[1])
str(ebg[[1]1])
str(ebg[[1]])
ebg[[1]][1]
ebg[[1]][2]
ebg[[1]][1]
?GRanges
seqnames(ebg)
seqnames(ebg[1])
chr4.idx <- all(seqnames(ebg) == "chr4")
ebg.sub <- ebg[chr4.idx]
seqnames(ebg.sub)
summarizeOverlaps(egb,ignore.strand=TRUE,singleEND=FALSE)
?summarizeOverlaps
summarizeOverlaps(ebg,ignore.strand=TRUE,singleEND=FALSE)
summarizeOverlaps(ebg,ignore.strand=TRUE,singleEnd=FALSE)
summarizeOverlaps(ebg.sub,ignore.strand=TRUE,singleEnd=FALSE)
summarizeOverlaps(ebg,ebg.sub,ignore.strand=TRUE,singleEnd=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub, bf,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub, bf,
#mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub,
#mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub,
#mode="Union",bf,
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub,bf,
#mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
genes(se)
seqnames(se)
seqnames(se)$FBgn0002521
library(BiocParallel)
register(SerialParam())
library(GenomicAlignments)
se <- summarizeOverlaps(ebg.sub,bf,
#mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
seqnames(se)$FBgn0002521
se$FBgn0002521
?seqnames
library(BiocParallel)
register(SerialParam())
seqinfo(se)$FBgn0002521
seqinfo(se)
se
se[row.name=="FBgn0002521",]
se[rowname=="FBgn0002521",]
se["FBgn0002521",]
se[,1]
se[[1]]
se[1]
summary(se[1])
str(se[1])
assay(se)
head(assay(se), 1)
download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/wang_eset.RData", "wang_eset.RData")
load("wang_eset.RData")
library(Biobase)
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~cell.type)
library(BiocInstaller)
biocLite("DESeq2")
count.matrix <- exprs(wang.eset)[,10:21]
col.data <- pData(wang.eset)[10:21,]
library(DESeq2)
dds <- DESeqDataSetFromMatrix(count.matrix, col.data, design=~cell.type)
dds$cell.type
estimateSizeFactors(dds)
head(estimateSizeFactors(dds))
str(dds)
sf<-estimateSizeFactors(dds)
sf
sf<-estimateSizeFactors(dds$cell.type)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
colSums(counts(dds))
plot(sizeFactors(dds), colSums(counts(dds)))
abline(lm(colSums(counts(dds)) ~ sizeFactors(dds) + 0))
max(sizeFactors(dds))
which.max(sizeFactors(dds))
sfmax<-which.max(sizeFactors(dds))
dds$cell.type
dds$cell.type[which.max(sizeFactors(dds))]
dds$cell.type[which.max(sizeFactors(dds))]
dds <- estimateSizeFactors(dds)
dds$cell.type[which.max(sizeFactors(dds))]
vsd <- varianceStabilizingTransformation(dds)
plot(assay(vsd)[,1:2], cex=.1)
vsd <- varianceStabilizingTransformation(dds)
library(ggplot2)
(data <- plotPCA(rld, intgroup=c("dex","cell"), returnData=TRUE))
makeLab <- function(x,pc) paste0("PC",pc,": ",x,"% variance")
ggplot(data, aes(PC1,PC2,col=dex,shape=cell)) + geom_point() +
xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2))
(percentVar <- 100*round(attr(data, "percentVar"),2))
rld <- rlog(dds)
library(ggplot2)
(data <- plotPCA(rld, intgroup=c("dex","cell"), returnData=TRUE))
(data <- plotPCA(rld, intgroup=c("dex","cell"), returnData=TRUE))
plotPCA(rld, intgroup="dex")
head(vsd)
vsd <- varianceStabilizingTransformation(dds,blind=FALSE)
plotPCA(vsd, intgroup="dex")
plotPCA(vsd, col="cell.type")
?plotPCA
assay(vsd)
colnames(vsd)
plotPCA(vsd)
plotPCA(vsd,colnames(vsd))
plotPCA(vsd,intgroup="dex")
head(colData(dds))
colData(dds)
plotPCA(vsd,intgroup="cell.type")
vsd <- varianceStabilizingTransformation(dds,blind=FALSE)
colData(dds)
plotPCA(vsd,intgroup="cell.type")
makeLab <- function(x,pc) paste0("PC",pc,": ",x,"% variance")
ggplot(data, aes(PC1,PC2,col=cell.type,shape=cell)) + geom_point() +
xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2))
library(ggplot2)
rld <- rlog(dds)
(data <- plotPCA(rld, intgroup=c("dex","cell"), returnData=TRUE))
(percentVar <- 100*round(attr(data, "percentVar"),2))
makeLab <- function(x,pc) paste0("PC",pc,": ",x,"% variance")
ggplot(data, aes(PC1,PC2,col=cell.type,shape=cell)) + geom_point() +
xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2))
(data <- plotPCA(rld, intgroup=c("cell.type"), returnData=TRUE))
(percentVar <- 100*round(attr(data, "percentVar"),2))
makeLab <- function(x,pc) paste0("PC",pc,": ",x,"% variance")
ggplot(data, aes(PC1,PC2,col=cell.type,shape=cell)) + geom_point() +
xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2))
ggplot(data, aes(PC1,PC2,col=cell.type)) + geom_point() +
xlab(makeLab(percentVar[1],1)) + ylab(makeLab(percentVar[2],2))
rmeans <- rowMeans(assay(vsd)) # row mean of rlog-transformed data
idx <- c(1,2,10,7,8,9,12) # pick some samples for visualization
mat <- assay(vsd)[rmeans > 1,idx] # pull out a small matrix of rlog-transformed counts
colnames(mat) <- vsd$cell.type[idx] # name the columns of matrix by cell type
panel.sub <- function(x,y,...) points(cbind(x,y)[sample(length(x),1000),],...)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)  {
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(mat, asp=1, col=rgb(0,0,0,.3), lower.panel=panel.cor, upper.panel=panel.sub)
colnames(mat[,-7])[ which.max(cor(mat[,7], mat[,-7])) ]
rp<-c(55,500,2000)
pr<-c(320,1300,3100)
plot(rp,pr)
rp<-c(55,100,500,2000)
pr<-c(320,419,1300,3100)
plot(rp,pr)
