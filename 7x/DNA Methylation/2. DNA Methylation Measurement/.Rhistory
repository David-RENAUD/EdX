head(hesc.max)
mean(hesc.max==ips.max)
table(ips.max)
head(gene.tab)
str(isoforms.per.gene)
head(isoforms.per.gene)
table(isoforms.per.gene)
length(unique(isoforms.per.gene$gene_id))
length(unique(isoforms.per.gene$isoform_id))
str(gene.tab)
index=gene.tab==1
index
index=gene.tab>1
mean(hesc.max[index]==ips.max[index])
mean(hesc.max==ips.max)[index]
mean((hesc.max==ips.max)[index])
source("http://www.bioconductor.org/biocLite.R")
biocLite()
biocVersion()
biocLite("minfi")
packageVersion("minfi")
library(BSgenome.Hsapiens.UCSC.hg19)
chr22 = Hsapiens[["chr22"]]
s = subseq(chr22,start=23456789,width=1000)
print( as.character(s) )
length(s)
table(s)
str(s)
length(s)
s[3]
mean(s=="G" | s=="C")
summary(s)
?DNAString
alphabet(s)
alphabet(s, baseOnly=TRUE)
table(s, baseOnly=TRUE)
s2<-s[s=="G"]
slotNames(s)
alphabetFrequency(s, baseOnly=TRUE, as.prob=TRUE)
.331+.218
.252+.331
sum( alphabetFrequency(s)[c("C","G")] ) / 1000
# or
letterFrequency(s, "CG", as.prob=TRUE)
letterFrequency(s, "CG", as.prob=TRUE)
?X-String
sc<-as.character(s)
sc
?gsub
gsub("GC",sc)
gsub("GC",x=sc)
grep("GC",x=sc)
grep("G",x=sc)
grepl("G",x=sc)
countPattern("GC",s)
countPattern("GC",s)
matchPattern("GC",s)
subseq(s,11,12)
s
matchPattern("CG",s)
countPattern("GC",s)
biocLite("AnnotationHub")
library(AnnotationHub)
ah = AnnotationHub()
head(ah)
ah = subset(ah,ah$genome=="hg19")
query(ah,"genes")
?query
str(ah)
query(ah,"hg19 CpG Islands")
query(ah,"hg19 CpG Island")
query(ah,"CpG Island")
query(ah,"CpG Islands")
query(ah, "cpg Islands")
##or
query(ah,"cpg")
## or
query(ah,"Islands")
library(AnnotationHub)
ah = AnnotationHub()
cgi = ah[["AH5086"]]
class(cgi)
class(cgi)
cgi
nrow(cgi)
length(cgi)
length(cgi)
library(BSgenome.Hsapiens.UCSC.hg19)
cgiseq= getSeq(Hsapiens,cgi)
genome(cgi)[1:24]
genome(Hsapiens)[1:24]
alphabetfrequency("C",cgiseq)
alphabetFrequency("C",cgiseq)
?"alphabetFrequency"
alphabetFrequency(cgiseq)
alphabetFrequency(cgiseq,baseOnly=TRUE,as.prob=TRUE)
head(alphabetFrequency(cgiseq,baseOnly=TRUE,as.prob=TRUE))
median(alphabetFrequency(cgiseq,baseOnly=TRUE,as.prob=TRUE))[,"C"]
head(alphabetFrequency(cgiseq,baseOnly=TRUE,as.prob=TRUE))[,"C"]
median(alphabetFrequency(cgiseq,baseOnly=TRUE,as.prob=TRUE))[,"C"]
median(alphabetFrequency(cgiseq,baseOnly=TRUE,as.prob=TRUE)[,"C"])
res = alphabetFrequency(cgiseq)
L = rowSums(res)
cprop = res[,"C"]/L
median(cprop)
# or
median(letterFrequency(cgiseq, "C", as.prob=TRUE))
# Make a histogram to see they are generally high
hist(cprop)
res = alphabetFrequency(cgiseq)
L = rowSums(res)
gprop = res[,"G"]/L
median(gprop)
# or
median(letterFrequency(cgiseq, "G", as.prob=TRUE))
# Make a histogram to see they are generally high
hist(cprop)
hist(gprop)
?"vcountPattern"
vcountPattern("CG",cgiseq)
res = alphabetFrequency(cgiseq)
L = rowSums(res)
cprop = res[,"C"]/L
gprop = res[,"G"]/L
expected=L*cprop*gprop
expected
res = alphabetFrequency(cgiseq)
L = rowSums(res)
cprop = res[,"C"]/L
gprop = res[,"G"]/L
expected=L*cprop*gprop
observed=vcountPattern("CG",cgiseq)
oeratio=observed/expected
median(oeratio)
hist(oeratio)
res = alphabetFrequency(cgiseq)
L = rowSums(res)
cprop = res[,"C"]/L
gprop = res[,"G"]/L
expected=L*cprop*gprop
observed=vcountPattern("CG",cgiseq)
cpgoe=observed/expected
median(cpgoe)
## We can look at a histogram
hist(cpgoe)
abline(v=1,col=2)
##because these are ratios, better to look at log
hist(log2 ( cpgoe ))
abline(v=0,col=2)
mean(cpgoe[log2(cpgoe)<0])
res = alphabetFrequency(cgiseq)
L = rowSums(res)
cprop = res[,"C"]/L
gprop = res[,"G"]/L
expected=L*cprop*gprop
observed=vcountPattern("GC",cgiseq)
gpcoe=observed/expected
median(gpcoe)
## We can look at a histogram
##because these are ratios, better to look at log
hist(log2 ( gpcoe ))
abline(v=0,col=2)
mean(cpgoe[log2(cpgoe)<0])
mean(cpgoe[log2(gpcoe)<0])
mean(gpcoe[log2(gpcoe)<0])
boxplot(list(cpgoe,gpcoe))
chr2use = seqlevels(cgi)[1:24]
index = which( seqnames(cgi) %in% chr2use)
noncgi = shift(cgi[index],20000)
library(BSgenome.Hsapiens.UCSC.hg19)
noncgiseq= getSeq(Hsapiens,noncgi)
nullres = alphabetFrequency(noncgiseq)
keepIndex=nullres[,"G"]>0 &  nullres[,"C"]>0 & nullres[,"N"]==0
nullres = nullres[keepIndex,]
noncgiseq=noncgiseq[keepIndex]
L = rowSums(nullres)
cnullprop = nullres[,"C"]/L
gnullprop = nullres[,"G"]/L
nullexpected=L*cnullprop*gnullprop
nullobserved=vcountPattern("CG",noncgiseq)
nullcpgoe=nullobserved/nullexpected
median(nullcpgoe)
boxplot(gpcoe,noncgioe,cpgoe)
L2 = rowSums(nullres)
cprop = nullres[,"C"]/L2
gnlprop = nullres[,"G"]/L2
expected2=L*cprop2*gprop2
observed2=vcountPattern("CG",noncgiseq)
noncgioe=observed/expected2
median(noncgioe)
L2 = rowSums(nullres)
cprop = nullres[,"C"]/L2
gnlprop = nullres[,"G"]/L2
expected2=L2*cprop2*gprop2
observed2=vcountPattern("CG",noncgiseq)
noncgioe=observed/expected2
median(noncgioe)
L2 = rowSums(nullres)
cprop2 = nullres[,"C"]/L2
gprop2 = nullres[,"G"]/L2
expected2=L2*cprop2*gprop2
observed2=vcountPattern("CG",noncgiseq)
noncgioe=observed/expected2
median(noncgioe)
L2 = rowSums(nullres)
cprop2 = nullres[,"C"]/L2
gprop2 = nullres[,"G"]/L2
expected2=L2*cprop2*gprop2
observed2=vcountPattern("CG",noncgiseq)
noncgioe=observed2/expected2
median(noncgioe)
boxplot(gpcoe,noncgioe,cpgoe)
rm(list=ls())
library(devtools)
install_github("genomicsclass/coloncancermeth")
library(coloncancermeth)
data(coloncancermeth)
dim(meth)
dim(pd)
print( gr )
str(gr)
pd
table(pd$Status)
str(meth)
dim(meth)
colnames(meth)
index<-which(pd$Status=="cancer")
index
head(meth[,index])
class(meth)
colnames(meth)
str(pd)
pd$bcr_sample_barcode
pd$bcr_patient_barcode
pd$bcr_patient_barcode[index]
index
pd$bcr_patient_barcode[,index]
meth[,index]
head(meth[,index])
pd$bcr_patient_barcode
str(pdf)
str(pd)
dim(pd)
which(pd$bcr_patient_barcode[index]=="TCGA-A6-4107")
index[7]
names(pd)[ grep("barcode",names(pd)) ]
which(pd[,1]=="TCGA-A6-4107" & pd$Status=="cancer")
d = dist( t(meth))
?cmdscale
plot(cmdscale(d))
plot(cmdscale(d))
plot(cmdscale(d),col=pd$Status)
mds = cmdscale(d)
cols = as.numeric(pd$Status)
plot(mds,col=cols)
legend("topleft",levels(pd$Status),col=1:2,pch=1)
library(limma)
X = model.matrix(~pd$Status)
fit = lmFit(meth,X)
eb = ebayes(fit)
pvals = eb$p.value[,2]
qvals<-qvalue(pvals)
library(qvalue)
qvals<-qvalue(pvals)
mean(qvals <0.05)
summary(qvals)
str(qvals)
qvalues(qvals)
qvals$qvalues
mean(qvals$qvalues<0.05)
library(qvalue)
qvals<-qvalue(pvals)$qvalue
mean(qvals<0.05)
cpgindex=qvals[qvals<0.05]
length(cpgindex)
pd$Status=="cancer"
dim(meth)
length(qvals)
head(cpgindex)
cpgindex=qvals<0.05
length(cpgindex)
?rowmeans
?rowMeans
library(Matrix)
library(survival)
install.packages("survival")
rowmeans(meth[cpgindex,pd$Status=="cancer"])
rowMeans(meth[cpgindex,pd$Status=="cancer"])
mean(rowMeans(meth[cpgindex,pd$Status=="cancer"])>rowMeans(meth[cpgindex,pd$Status=="normal"]))
library(qvalue)
library(limma)
X = model.matrix(~pd$Status)
fit = lmFit(meth,X)
eb = ebayes(fit)
pvals = eb$p.value[,2]
qvals = qvalue(pvals)$qvalue
index = which(qvals<=0.05)
diffs = fit$coef[index,2]
mean(diffs > 0)
library(AnnotationHub)
ah = AnnotationHub()
cgi = ah[["AH5086"]]
class(cgi)
cgi
?over
library(Biobase)
sessionInfo()
source("http://www.bioconductor.org/biocLite.R")
biocLite()
?over
?"%over%"
??%over%
??"%over%"
setwd("C:/Users/Mike/Rspace/PH525/7x/DNA Methylation/2. DNA Methylation Measurement")
# Chunk 1
library(devtools)
install_github("genomicsclass/coloncancermeth")
# Chunk 2
library(coloncancermeth)
data(coloncancermeth)
dim(meth)
dim(pd)
print( gr )
# Chunk 3
table(pd$Status)
# Chunk 4
##figure out the column number this way:
names(pd)[ grep("barcode",names(pd)) ]
##
which(pd[,1]=="TCGA-A6-4107" & pd$Status=="cancer")
# Chunk 5
d = dist( t(meth))
# Chunk 6
mds = cmdscale(d)
cols = as.numeric(pd$Status)
plot(mds,col=cols)
legend("topleft",levels(pd$Status),col=1:2,pch=1)
# Chunk 7
library(limma)
X = model.matrix(~pd$Status)
fit = lmFit(meth,X)
eb = ebayes(fit)
pvals = eb$p.value[,2]
# Chunk 8
library(qvalue)
qvals<-qvalue(pvals)$qvalue
mean(qvals<0.05)
# Chunk 9
cpgindex=qvals<0.05
library(Matrix)
mean(rowMeans(meth[cpgindex,pd$Status=="cancer"])>rowMeans(meth[cpgindex,pd$Status=="normal"]))
# or (model answer - which uses idea of model coefficients
# beta1=1 for cancer, 0 for normal)
library(qvalue)
library(limma)
X = model.matrix(~pd$Status)
fit = lmFit(meth,X)
eb = ebayes(fit)
pvals = eb$p.value[,2]
qvals = qvalue(pvals)$qvalue
index = which(qvals<=0.05)
diffs = fit$coef[index,2]
mean(diffs > 0)
# Chunk 10
library(AnnotationHub)
ah = AnnotationHub()
cgi = ah[["AH5086"]]
cgi
index<-meth[cpgindex,] %over%cgi
length(cgi)
length(index)
length(meth)
dim(meth)
dim(cgi)
i <- which.min(pvals)
middle <- cgi[i,]
head(meth)
cgi
pd
cgi
gr
index<-gr %over%cpgindex
library(GenomicRanges)
index<-gr %over%cpgindex
index<-cgi %over%cpgindex
index<-gr %over%cgi
head(index)
print( gr )
mean(index)
index<-cgi %over%gr
mean(index)
library(GenomicRanges)
index<-gr %over%cgi
mean(index)
index<-which(gr %over%cgi)
cpgindex = which(qvals<=0.05)
diffs = fit$coef[cpgindex,2]
mean(diffs > 0)
length(qvals)
head9cpgindex
head(cpgindex)
index<-(gr[cpgindex,] %over%cgi)
mean(index)
islands=gr[index]%over%cgi
hypermethylated=fit$coef[index,2]>0
prop.table( table(islands,hypermethylated) )
library(bumphunter)
X = model.matrix(~pd$Status)
chr = as.character(seqnames(gr))
res = bumphunter(meth,X,chr=chr,pos=start(gr),cutoff=0.1)
head(res$table)
dmrs = res$table[ res$table$L>=3, ]
dmrs = makeGRangesFromDataFrame(dmrs)
dmrs
?distanceToNearest
distanceToNearest(dmrs,cgi)
dists<-distance(distanceToNearest(dmrs,cgi))
dists<-distanceToNearest(dmrs,cgi)
dists$distance
dists
hits<-distanceToNearest(dmrs,cgi)
mcols(hits)$distance
mean(mcols(hits)$distance==0)
map<-distanceToNearest(dmrs,cgi)
mean(mcols(map)$distance==0)
map<-distanceToNearest(dmrs,cgi)
d=mcols(map)$distance
mean(d==0)
mean(d>0 $ d<2000)
mean(d>0 & d<2000)
mean(d>0 & d<=2000)
map = distanceToNearest(dmrs,cgi)
d = mcols(map)$distance
mean(d>0 & d<=2000)
biocLite(c("minfi","IlluminaHumanMethylation450kmanifest","IlluminaHumanMethylation450kanno.ilmn12.hg19"))
library(BiocInstaller)
biocLite(c("minfi","IlluminaHumanMethylation450kmanifest","IlluminaHumanMethylation450kanno.ilmn12.hg19"))
rm(list=ls())
setwd("C:/Users/Mike/Rspace/PH525/7x/DNA Methylation/2. DNA Methylation Measurement")
path="C:/Users/Mike/RSpace/PH525/rawdata/idats"
list.files(path)
path="C:/Users/Mike/RSpace/PH525rawdata/idats"
list.files(path)
targets=read.csv(file.path(path,"targets.csv"),as.is=TRUE)
names(targets)
targets$Basename
str(targets)
targets$Status
table(targets$Status)
targets$Basename = file.path(path,targets$Basename)
rownames(targets)=sampleNames(rgset)
library(minfi)
rgset = read.450k(targets$Basename,verbose=TRUE)
rownames(targets)=sampleNames(rgset)
pData(rgset)=targets
dim(getRed(rgset))
dim(getGreen(rgset))
mset = preprocessIllumina(rgset)
mset = mapToGenome(mset)
mset = mapToGenome(mset)
dim(getBeta(mset,type="Illumina")) ##the argument type="Illumina" gives us default procedure
head(granges(mset))
?granges
class(mset)
mset = mapToGenome(mset)
mset = preprocessIllumina(rgset)
mset = mapToGenome(mset)
?mapToGenome
mset
biocLite("IlluminaHumanMethylation450kmanifest")
mset = preprocessIllumina(rgset)
biocLite("minfi")
mset = mapToGenome(mset)
sessionInfo()
mset
mset = preprocessIllumina(rgset)
mset
mset = mapToGenome(mset)
?mapToGenome
dim(getBeta(mset,type="Illumina")) ##the argument type="Illumina" gives us default procedure
head(granges(mset))
library(minfi)
rgset = read.450k(targets$Basename,verbose=TRUE)
rownames(targets)=sampleNames(rgset)
pData(rgset)=targets
dim(getRed(rgset))
dim(getGreen(rgset))
mset = preprocessIllumina(rgset)
mset = mapToGenome(mset)
biocLite("everything")
traceback()
?getAnnotation
mapToGenome
mapToGenome()
mset=mapToGenome(mset,what="everything")
getAnnotation(mset)
getAnnotation(mset,what="everythig")
getAnnotation(mset,what="everything")
getAnnotation(mset,what='everything')
getAnnotation(mset,what='Manifest')
getAnnotationObject(mset,what='Manifest')
getAnnotationObject(mset)
getAnnotation(mset)
getAnnotation(mset,what="Locations")
dim(getBeta(mset,type="Illumina")) ##the argument type="Illumina" gives us default procedure
head(granges(mset))
mset2<-granges(mset)
?granges
class(mset)
mset = preprocessIllumina(rgset)
library(minfi)
mset = mapToGenome(mset)
