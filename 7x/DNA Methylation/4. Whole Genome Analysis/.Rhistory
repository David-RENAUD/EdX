mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
cat(mypath,"grset")
cat(mypath,"/grset",sep="")
path="C:/temp/RSpace/PH525rawdata"
#mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
load(cat(path,"/grset",sep=""))
load(paste(path,"/grset",sep=""))
path="C:/temp/RSpace/PH525rawdata"
load(paste(path,"/grset",sep=""))
path="C:/users/Mike/RSpace/PH525rawdata"
#mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
load(paste(path,"/grset",sep=""))
paste(path,"/grset",sep="")
path="C:/Users/Mike/RSpace/PH525rawdata"
#mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
load(paste(path,"/grset",sep=""))
load("C:/users/Mike/RSpace/PH525rawdata/grset")
path="C:/Users/Mike/RSpace/PH525rawdata"
#mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
load(paste(path,"/grset.rda",sep=""))
library(minfi)
class(grset)
pData(grset)
names(pData(grset))
names(pData(grset))
pData(grset)$pData(grset)
pData(grset)$characteristics_ch1.1
pData(grset)[1,]
pData(grset)[1,"characteristics_ch1.1"]
age=pData(grset)$characteristics_ch1.1
age=as.character(age)
age[grep("N/A",age)] = NA
age=as.numeric(gsub("age \\(y\\):\ ","",age))
group = rep("normal",nrow(pData(grset)))
group[grepl("ulcerative",pData(grset)[,1])]="ulcerative"
group[grepl("Crohn",pData(grset)[,1])]="crohn"
group = factor(group,levels=c("normal","ulcerative","crohn"))
keep = which(rowSums(is.na(getBeta(grset)))==0 &
!seqnames(grset)%in%c("chrX","chrY"))
##create a new object
grset2=grset[keep,]
grset2
d <- dist(t(grset2))
mds <- cmdscale(d)
mypar()
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=21,
xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=15)
d <- dist(t(grset2))
names(pData(grset))
dim(pData(grset))
dim(grset2)
str(grset2)
summary(grset2)
grset2[1,]
grset2[1,1]
assays(grset2)[1,]
assays(grset2)[[1]]
assays(grset2)[[1]][1,]
summary(assays(grset2))
str(assays(grset2))
d <- dist(t(assay(grset2))
d <- dist(t(assays(grset2)))
d <- dist(t(as.matrix(assays(grset2))))
class(assays(grset2))
class(grset)
s<-getbeta(grset2)
s<-getBeta(grset2)
rm(s)
d <- dist(t(getBeta(grset2))
)
mds <- cmdscale(d)
mypar()
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=21,
library(rafalib)
library(rafalib)
mypar()
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=21,
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=21,xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=as.numeric(group))
library(rafalib)
mypar()
plot(mds[,1],mds[,2],bg=as.numeric(group),pch=as.numeric(group),xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=as.numeric(group))
d <- dist(t(getBeta(grset2)))
mds <- cmdscale(d)
library(rafalib)
mypar()
plot(mds[,1],mds[,2],col=as.numeric(group),pch=as.numeric(group),xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=as.numeric(group))
plot(mds[,1],mds[,2],col=age,pch=as.numeric(group),xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=as.numeric(group))
summary(age)
plot(mds[,1],mds[,2],col=ifelse(age>40,1,2),pch=as.numeric(group),xlab="First dimension",ylab="Second dimension")
legend("bottomleft",levels(group),col=seq(along=levels(group)),pch=as.numeric(group))
y = getBeta(grset2)
mds = cmdscale( dist( t(y)))
mypar(1,1)
col=ifelse(age>40,1,2)
plot(mds,pch=as.numeric(group),col=col)
legend("bottomleft",levels(group),pch=seq_along(group))
library("BSgenome.Hsapiens.UCSC.hg19")
chr22 = Hsapiens[["chr22"]]
res=matchPattern("CCGG",chr22)
length(res)
size=diff(start(res))
hist(log10(size))
mean(size>=40 & size<=220)
sum(size[size>=40 & size<=220])
path = "H:/RSpace/PH525rawdata/colonCancerWGBS/"
targets = read.table(file.path(path,"targets.txt"), header = TRUE, sep = "\t")
targets
#path = "H:/RSpace/PH525rawdata/colonCancerWGBS/"
path="C:/Users/Mike/RSpace/PH525/rawdata/colonCancerWGBS/"
targets = read.table(file.path(path,"targets.txt"), header = TRUE, sep = "\t")
targets
setwd("C:/Users/Mike/Rspace/PH525/7x/DNA Methylation/4. Whole Genome Analysis")
#path = "H:/RSpace/PH525rawdata/colonCancerWGBS/"
path="C:/Users/Mike/RSpace/PH525rawdata/colonCancerWGBS/"
targets = read.table(file.path(path,"targets.txt"), header = TRUE, sep = "\t")
targets
library("bsseq")
cov.files = list.files(path=path,pattern="*chr22.cov",full.names=TRUE)  # coverage files
colonCancerWGBS =read.bismark(files=cov.files, rmZeroCov=TRUE, sampleNames = as.character(targets$Run))
# add sample information to object
colData(colonCancerWGBS) = DataFrame(targets)
###Note you might see a warning message here. You can ignore.
library(BiocInstaller)
biocLite("bsseq")
library("bsseq")
cov.files = list.files(path=path,pattern="*chr22.cov",full.names=TRUE)  # coverage files
colonCancerWGBS =read.bismark(files=cov.files, rmZeroCov=TRUE, sampleNames = as.character(targets$Run))
# add sample information to object
colData(colonCancerWGBS) = DataFrame(targets)
###Note you might see a warning message here. You can ignore.
colonCancerWGBS
# phenotypic information
pData(colonCancerWGBS)
# granges object
granges(colonCancerWGBS)
cov=getCoverage(colonCancerWGBS,type = "Cov")
m=getCoverage(colonCancerWGBS,type = "M")
mean(apply(cov,1,min)>0)
#or
index=apply(cov>0,1,all)
mean(index)
totalc=apply(cov,1,sum)
plot(start(granges(colonCancerWGBS)),log10(totalc+1))
abline(log10(300),0,col="red")
abline(log10(200),0,col="blue")
hist(log10(totalc+1))
# model answer
tot = rowSums(cov)
##there are some very large values
hist(tot)
loc= start(colonCancerWGBS)
##plot by pieces
for(i in 1:11){
index=1:100000+100000*i ##very ad-hoc
plot(loc[index],tot[index],cex=.5,ylim=c(0,300))
}
cov=getCoverage(colonCancerWGBS,type = "Cov")
m=getCoverage(colonCancerWGBS,type = "M")
head(cov)
head(m)
?getCoverage
gr = GRanges(seqnames="22",ranges=IRanges(start=43793678,end= 45022550))
index=granges(colonCancerWGBS)%over%gr
library(rafalib)
i=1
index2=which(index & cov[,i]>=5 & cov[,i]<=50)
x=start(colonCancerWGBS)[index2]
y=m[index2,i]/cov[index2,i]
w=sqrt(cov[index2,i])/7
plot(x,y,cex=w)
