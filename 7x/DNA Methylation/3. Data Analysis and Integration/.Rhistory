granges(dat)[maxes]
# model answer
index = which.max(abs( fit$coef[,2]))
seqnames(dat)[index]
start(dat)[index]
library(qvalue)
##create design matrix
tissue = as.factor(pData(dat)$Tissue)
X = model.matrix(~tissue)
##extract methylation values
y = getBeta(dat)
## obtain effect sizes and pvals with limma
fit = lmFit(y,X)
eb = ebayes(fit)
## obtain q-values
qvals = qvalue(eb$p.value[,2])$qvalue
# model answer
library(rafalib)
mypar2(3,1)
index = which.max(abs( fit$coef[,2]))
gr=granges(dat)[index]+5000
index=which(granges(dat)%over%gr)
pos= start(dat)[index]
matplot(pos,y[index,],ylab="Methylation",col=as.numeric(tissue))
plot(pos, fit$coef[index,2],ylab="Effect Size")
plot(pos, -log10(qvals[index]) ,ylab="-log10 q-value")
# model answer
library(rafalib)
mypar(3,1)
index = which.max(abs( fit$coef[,2]))
gr=granges(dat)[index]+5000
index=which(granges(dat)%over%gr)
pos= start(dat)[index]
matplot(pos,y[index,],ylab="Methylation",col=as.numeric(tissue))
plot(pos, fit$coef[index,2],ylab="Effect Size")
plot(pos, -log10(qvals[index]) ,ylab="-log10 q-value")
library(rafalib)
mypar(3,1)
o = order(abs(fit$coef[,2]), decreasing = TRUE)[1:10]
for(i in o){
index = i
gr=granges(dat)[index]+5000
index=which(granges(dat)%over%gr)
pos= start(dat)[index]
matplot(pos,y[index,,drop=FALSE],ylab="Methylation",col=as.numeric(tissue))
plot(pos, fit$coef[index,2],ylab="Effect Size")
plot(pos, -log10(qvals[index]) ,ylab="-log10 q-value")
}
index= which(seqnames(dat)=="chr15")
dat2 = dat[index,]
library(doParallel)
ncores = detectCores()
registerDoParallel(cores = ncores)
##create design matrix
tissue = as.factor(pData(dat)$Tissue)
X = model.matrix(~tissue)
##extract methylation values
set.seed(1)
res = bumphunter(dat2,X,cutoff=0.1,B=100)
head(res$tab)
sum(res$table$fwer < 0.05)
index = which(qvals < 0.05 & abs(fit$coef[,2]) > 0.5 & seqnames(dat)=="chr15")
tab = res$tab[ res$tab$L >= 3,]
tab = makeGRangesFromDataFrame(tab)
length(findOverlaps(dat[index,],tab))/length(index)
#or (model answer:
mean(granges(dat[index,])%over%tab)
library(AnnotationHub)
cgi = AnnotationHub()[["AH5086"]]
tab = res$tab[res$tab$fwer <= 0.05,]
tab = makeGRangesFromDataFrame(tab)
map = distanceToNearest(tab,cgi)
d = mcols(map)$distance
mean(d>0 & d<=2000)
path=mypath
targets=read.delim(file.path (path,"targets.txt"),as.is=TRUE)
index = which( targets$Status=="normal" & targets$Tissue%in%c("colon","lung") )
targets = targets[index,]
library(minfi)
dat = read.450k.exp(base=path,targets = targets, verbose=TRUE)
## preprocess the data
dat = preprocessIllumina(dat)
dat = mapToGenome(dat)
dat = ratioConvert(dat,type="Illumina")
library(bumphunter)
tissue=pData(dat)$Tissue
X = model.matrix(~tissue)
res = bumphunter(dat,X,cutoff=0.25)
nrow(res$tab)
head(res$tab)
findOverlaps(tab,cgi)
findOverlaps(tab,cgi)
?bumphunter
head(tab)
findOverlaps(res$tab,cgi)
head(res$tab)
findOverlaps(granges(res$tab),cgi)
nrow(res$table)
tab<-res$table
head(tab)
map=distanceToNearest(tab,cgi)
tab<-makeGRangesFromDataFrame(tab,keep.extra.columns=TRUE)
map=distanceToNearest(tab,cgi)
map
findoverLaps(tab,cgi)
findOverlaps(tab,cgi)
mcol(findOverlaps(tab,cgi))$queryHits
queryHits(findOverlaps(tab,cgi))
unique(queryHits(findOverlaps(tab,cgi)))
length(unique(queryHits(findOverlaps(tab,cgi))))
tab<-res$table
head(tab)
length(unique(queryHits(findOverlaps(tab,cgi))))/nrow(tab)
tab<-res$table
head(tab)
length(unique(queryHits(findOverlaps(tab,cgi))))/nrow(tab)
unique(queryHits(findOverlaps(tab,cgi)))
findOverlaps(tab,cgi)
tab<-makeGRangesFromDataFrame(tab,keep.extra.columns=TRUE)
findOverlaps(tab,cgi)
length(unique(queryhits(findOverlaps(tab,cgi))))
length(unique(queryHits(findOverlaps(tab,cgi))))
length(unique(queryHits(findOverlaps(tab,cgi))))/nrow(tab)
length(unique(queryHits(findOverlaps(tab,cgi))))/nrow(res$tab)
length(unique(queryHits(findOverlaps(tab,cgi))))
2292/2299
queryHits(findOverlaps(tab,cgi)))
queryHits(findOverlaps(tab,cgi))
table(queryHits(findOverlaps(tab,cgi)))
hits<-queryHits(findOverlaps(tab,cgi))
hits
length(hits)
length(unique(hits))
2292/2299
findOverlaps(tab,cgi)
shits<-subjectHits(findOverlaps(tab,cgi))
shits
length(unique(shits))
path=mypath
load(file.path(path,"tcgaLungColonExpLM.rda"))
class(tcgaLungColonExpLM)
print( annotation )
library(limma)
library(qvalue)
eb=ebayes(tcgaLungColonExpLM)
qvals=qvalue(eb$p.value[,2])$qvalue
library(hgu133plus2.db)
map=select(hgu133plus2.db,keys=rownames(tcgaLungColonExpLM$coef),columns=c("ENTREZID"),keytype="PROBEID")
library(Homo.sapiens)
Genes=genes(Homo.sapiens)
Genes=resize(Genes,1) ## we want the tss
index1=match(as.character(mcols(Genes)$GENEID),map$ENTREZID)
index2 = match(map$PROBEID[index1],rownames(tcgaLungColonExpLM$coef))
M = tcgaLungColonExpLM$coef[index2,2]
library(BiocInstaller)
biocLite("hgu133plus2.db")
library(hgu133plus2.db)
map=select(hgu133plus2.db,keys=rownames(tcgaLungColonExpLM$coef),columns=c("ENTREZID"),keytype="PROBEID")
library(Homo.sapiens)
Genes=genes(Homo.sapiens)
Genes=resize(Genes,1) ## we want the tss
index1=match(as.character(mcols(Genes)$GENEID),map$ENTREZID)
index2 = match(map$PROBEID[index1],rownames(tcgaLungColonExpLM$coef))
M = tcgaLungColonExpLM$coef[index2,2]
tab=makeGRangesFromDataFrame(res$tab,keep.extra.columns = TRUE)
map2=distanceToNearest(tab,Genes)
index1=subjectHits(map2)
dist = mcols(map2)$dist
library(rafalib)
mypar(2,2)
for(i in c(0,1,2,3)){
keep = dist< 10000 & tab$L>i
plot(tab$value[keep],M[index1][keep],main=paste("cor=",signif(cor(tab$value[keep],M[index1][keep],use="complete"),2)))
}
tab<-res$table
head(tab)
tab<-makeGRangesFromDataFrame(tab,keep.extra.columns=TRUE)
qhits<-queryHits(findOverlaps(tab,cgi))
shits<-subjectHits(findOverlaps(tab,cgi))
?findOverlaps
tab<-makeGRangesFromDataFrame(tab,keep.extra.columns=TRUE)
findOverlaps(tab,cgi)
length(unique(qhits))
length(unique(qhits))/nrow(res$tab)
findOverlaps(cgi,tab)
length(unique(qhits))/nrow(res$tab)
targets
?signif
tab
class(tcgaLungColonExpLM)
tcgaLungColonExpLM$coef
head(tcgaLungColonExpLM$coef)
keep
head(tab)
setwd("H:/Rspace/PH525/7x/DNA Methylation/3. Data Analysis and Integration")
#path="C:/temp/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
list.files(mypath)
library(minfi)
path="mypath"
targets=read.delim(file.path (path,"targets.txt"),as.is=TRUE)
index = which( targets$Tissue=="colon")
targets = targets[index,]
dat = read.450k.exp(base=path,targets = targets, verbose=TRUE)
library(minfi)
path=mypath
targets=read.delim(file.path (path,"targets.txt"),as.is=TRUE)
index = which( targets$Tissue=="colon")
targets = targets[index,]
dat = read.450k.exp(base=path,targets = targets, verbose=TRUE)
dat = preprocessIllumina(dat)
dat = mapToGenome(dat)
cdat = cpgCollapse(dat)
nrow(dat)
class(cdat)
str(cdat)
?cpgCollapse
str(cpgCollapse$blockinfo)
str(cpgCollapse$blockInfo)
cpgCollapse$blockInfo
cdat$blockInfo
str(cdat$blockInfo)
cdat$object
head(granges(cdat$obj))
mean(type(granges(cdat$obj))=="OpenSea")
type(granges(cdat$obj))
mean(granges(cdat$obj)$type=="OpenSea")
prop.table(table(mcols( granges(cdat$obj))$type))
status = factor(pData(cdat$obj)$Status,
level=c("normal","cancer"))
X=model.matrix(~status)
res = blockFinder(cdat$obj,X,cutoff=0.05)
head(res$table)
index=nrow(pData(dat))
index
index=pData(dat)$Status=="cancer"
index
index2=pData(dat)$Status!="cancer"
index1+index2
index1=pData(dat)$Status=="cancer"
index1
index2
sum(index1=index2)
sum(index1==index2)
sum(index1!=index2)
head(res$table)
hist(res$table$value)
nrow(res$table)
sum(res$table$value<0)
mean(res$table$value<0)
tab=makeGRangesFromDataFrame(res$table)
index= granges(cdat$obj)%over% (tab[1]+10000)
pos=start(cdat$obj)[index]
col=as.numeric(status)
matplot(pos,getBeta(cdat$obj)[index,],col=col,pch=1,cex=0.5)
##and these are the estimated difference
plot(pos,res$fitted[index])
mpar(2,1)
mypar(2,1)
tab=makeGRangesFromDataFrame(res$table)
index= granges(cdat$obj)%over% (tab[1]+10000)
pos=start(cdat$obj)[index]
col=as.numeric(status)
matplot(pos,getBeta(cdat$obj)[index,],col=col,pch=1,cex=0.5)
##and these are the estimated difference
plot(pos,res$fitted[index])
#mypath="C:/temp/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
mypath="H:/RSpace/PH525rawdata/PH525tcgaMethylationSubset-master"
list.files(mypath)
targets=read.delim(file.path (mypath,"targets.txt"),as.is=TRUE)
nrow(targets)
nrow(targets[targets$Status=="normal" & targets$Tissue=="colon",])
# or
sum(targets$Tissue=="colon" & targets$Status=="normal")
##or look here
table(targets$Tissue,targets$Status)
index = which( targets$Status=="normal" & targets$Tissue%in%c("colon","breast") )
targets = targets[index,]
library(minfi)
dat = read.450k.exp(base=mypath,targets = targets, verbose=TRUE)
class(dat)
## preprocess the data
dat = preprocessIllumina(dat)
class(dat)
## assign locations to each CpG
dat = mapToGenome(dat)
class(dat)
## precompute methylation values from U and M values
dat = ratioConvert(dat,type="Illumina")
class(dat)
library(rafalib)
mypar(1,1)
##extract methylation values
y = getBeta(dat)
shist(y)
mds = cmdscale( dist(t(y)))
tissue = as.factor(pData(dat)$Tissue)
plot(mds,col=tissue)
library(limma)
##create design matrix
tissue = as.factor(pData(dat)$Tissue)
X = model.matrix(~tissue)
##extract methylation values
y = getBeta(dat)
## obtain effect sizes and pvals with limma
fit = lmFit(y,X)
index = which.max(abs( fit$coef[,2]))
seqnames(dat)[index]
start(dat)[index]
library(qvalue)
##create design matrix
tissue = as.factor(pData(dat)$Tissue)
X = model.matrix(~tissue)
##extract methylation values
y = getBeta(dat)
## obtain effect sizes and pvals with limma
fit = lmFit(y,X)
eb = ebayes(fit)
## obtain q-values
qvals = qvalue(eb$p.value[,2])$qvalue
##When reporting such small p-values there is no need to show exactly how small it is
## so we can say < 10^-6
index = which.max(abs( fit$coef[,2]))
qvals[index]
# model answer
library(rafalib)
mypar(3,1)
index = which.max(abs( fit$coef[,2]))
gr=granges(dat)[index]+5000
index=which(granges(dat)%over%gr)
pos= start(dat)[index]
matplot(pos,y[index,],ylab="Methylation",col=as.numeric(tissue))
plot(pos, fit$coef[index,2],ylab="Effect Size")
plot(pos, -log10(qvals[index]) ,ylab="-log10 q-value")
library(rafalib)
mypar(3,1)
o = order(abs(fit$coef[,2]), decreasing = TRUE)[1:10]
for(i in o){
index = i
gr=granges(dat)[index]+5000
index=which(granges(dat)%over%gr)
pos= start(dat)[index]
matplot(pos,y[index,,drop=FALSE],ylab="Methylation",col=as.numeric(tissue))
plot(pos, fit$coef[index,2],ylab="Effect Size")
plot(pos, -log10(qvals[index]) ,ylab="-log10 q-value")
}
index= which(seqnames(dat)=="chr15")
index= which(seqnames(dat)=="chr15")
dat2 = dat[index,]
library(doParallel)
ncores = detectCores()
registerDoParallel(cores = ncores)
##create design matrix
tissue = as.factor(pData(dat)$Tissue)
X = model.matrix(~tissue)
##extract methylation values
set.seed(1)
res = bumphunter(dat2,X,cutoff=0.1,B=100)
head(res$tab)
sum(res$table$fwer < 0.05)
index = which(qvals < 0.05 & abs(fit$coef[,2]) > 0.5 & seqnames(dat)=="chr15")
tab = res$tab[ res$tab$L >= 3,]
tab = makeGRangesFromDataFrame(tab)
length(findOverlaps(dat[index,],tab))/length(index)
#or (model answer:
mean(granges(dat[index,])%over%tab)
library(AnnotationHub)
cgi = AnnotationHub()[["AH5086"]]
tab = res$tab[res$tab$fwer <= 0.05,]
tab = makeGRangesFromDataFrame(tab)
map = distanceToNearest(tab,cgi)
d = mcols(map)$distance
mean(d>0 & d<=2000)
path=mypath
targets=read.delim(file.path (path,"targets.txt"),as.is=TRUE)
index = which( targets$Status=="normal" & targets$Tissue%in%c("colon","lung") )
targets = targets[index,]
nrow(targets)
ncol(targets)
library(minfi)
dat = read.450k.exp(base=path,targets = targets, verbose=TRUE)
## preprocess the data
dat = preprocessIllumina(dat)
dat = mapToGenome(dat)
dat = ratioConvert(dat,type="Illumina")
library(bumphunter)
tissue=pData(dat)$Tissue
X = model.matrix(~tissue)
res = bumphunter(dat,X,cutoff=0.25)
nrow(res$tab)
findOverlaps(dat,res$tab)
tab<-makeGRangesFromDataFrame(res$tab,keep.extra.columns=TRUE)
findOverlaps(dat,res$tab)
tab
dat
length(findOverlaps(dat[index,],tab))/length(index)
#or (model answer:
mean(granges(dat[index,])%over%tab)
tab<-makeGRangesFromDataFrame(res$tab,keep.extra.columns=TRUE)
findOverlaps(dat,tab)
hits<-queryHits(findOverlaps(dat,tab))
length(hits)
length(unique(hits))
hits<-subjectHits(findOverlaps(dat,tab))
length(unique(hits))
14479/18695
table(hits)
sum(table(hits))
length(table(hits==1))
nrow(table(hits==1))
sum(table(hits==1))
class(table(hits))
str(table(hits))
sum(table(hits)==1))
sum(table(hits)==1)
tab<-makeGRangesFromDataFrame(res$tab,keep.extra.columns=TRUE)
hits<-subjectHits(findOverlaps(dat,tab))
sum(table(hits)==1)
sum(table(hits)==1)/nrow(res$tab)
hist(res$tab$L)
biocLite("genome")
library("BSgenome.Hsapiens.UCSC.hg19")
chr22 = Hsapiens[["chr22"]]
?matchPattern
matchPattern("CCGG",chr22)
length(res)
nrow(res)
str(res)
res=matchPattern("CCGG",chr22)
length(res)
res
dits<-dist(res)
dits<-distanceToNearest(res)
mismatch("CCGG", chr22, fixed=TRUE)
mismatch("CCGG", res, fixed=TRUE)
summary(res$start)
summary(start(res))
flengths=numeric()
for (i in 2:length(res)){
flengths[i]=start(res)[i]-end(res)[i-1]
}
hist(flengths)
hist(flengths,breaks=50)
mypar(1,1)
hist(flengths,breaks=50)
summary(flengths)
hist(log(flengths),breaks=50)
hist(log(flengths),breaks=50)
size=diff(start(res))
hist(log10(size))
mean(size>=40 & size<=220)
mean(size[size>=40 & size<=220])
mean(size>=40 & size<=220)
sum(size>=40 & size<=220)
sum(size[size>=40 & size<=220])
path = "H:/RSpace/PH525rawdata/colonCancerWGBS/"
targets = read.table(file.path(path,"targets.txt"), header = TRUE, sep = "\t")
targets
library("bsseq")
cov.files = list.files(path=path,pattern="*chr22.cov",full.names=TRUE)  # coverage files
colonCancerWGBS =read.bismark(files=cov.files, rmZeroCov=TRUE, sampleNames = as.character(targets$Run))
# add sample information to object
colData(colonCancerWGBS) = DataFrame(targets)
###Note you might see a warning message here. You can ignore.
library(BiocInstaller)
biocLite("bsseq")
library("bsseq")
cov.files = list.files(path=path,pattern="*chr22.cov",full.names=TRUE)  # coverage files
colonCancerWGBS =read.bismark(files=cov.files, rmZeroCov=TRUE, sampleNames = as.character(targets$Run))
# add sample information to object
colData(colonCancerWGBS) = DataFrame(targets)
###Note you might see a warning message here. You can ignore.
colonCancerWGBS
# phenotypic information
pData(colonCancerWGBS)
# granges object
granges(colonCancerWGBS)
cov=getCoverage(colonCancerWGBS,type = "Cov")
m=getCoverage(colonCancerWGBS,type = "M")
m
granges(colonCancerWGBS)
nrow(m)
apply(m,1,min)
apply(m,2,min)
sum(apply(m,1,min)>0)
mean(apply(m,1,min)>0)
?apply
head(m)
hist(apply(m,1,min))
max(m)
granges(colonCancerWGBS)
mean(apply(Cov,1,min)>0)
mean(apply(cov,1,min)>0)
index=apply(cov>0,1,all)
totalc=apply(cov,1,sum)
plot(start(granges(colonCancerWGBS)),totalc)
hist(totalc)
plot(start(granges(colonCancerWGBS)),log10(totalc+1)
plot(start(granges(colonCancerWGBS)),log10(totalc+1))
plot(start(granges(colonCancerWGBS)),log10(totalc+1))
log10(300)
abline(h=log10(300),col=red)
abline(h=log10(300),col="red")
abline(log10(300),0,col="red")
abline(log10(200),0,col="blue")
hist(start(granges(colonCancerWGBS)),log10(totalc+1))
hist(log10(totalc+1))
cov=getCoverage(colonCancerWGBS,type = "Cov")
m=getCoverage(colonCancerWGBS,type = "M")
cov
head(cov)
head(m)
