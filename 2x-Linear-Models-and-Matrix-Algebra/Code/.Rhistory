abline(0,1)
mypar(2,2)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
str(y)
?replicate
replicate(10000,sample(y,25))
a<-replicate(10000,sample(y,25))
str(a)
a[,1]
a<-replicate(10000,mean(sample(y,25))
set.seed(1)
a<-replicate(10000,mean(sample(y,25)))
str(a)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mpar(1,1)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mypar(1,1)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
hist(y)
mypar(1,2)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
mypar(1,2)
hist(y)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(y)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
z<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(z)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#..or
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
mypar(2,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
set.seed(1)
z<-replicate(10000,mean(sample(y,25)))
mypar(2,2)
hist(z)
z<-( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
#..or
set.seed(1)
avgs <- replicate(10000, mean( sample(y, 25)))
#mypar(2,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
library(downloader)
library(dplyr)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/babies.txt"
filename <- basename(url)
download(url, destfile=filename)
babies <- read.table("babies.txt", header=TRUE)
bwt.nonsmoke <- filter(babies, smoke==0) %>% select(bwt) %>% unlist
bwt.smoke <- filter(babies, smoke==1) %>% select(bwt) %>% unlist
?shuffle
library(raflab)
library(rafalab)
install.packages("rafalib")
library(rafalab)
library(rafalib)
?shuffle
?shuffle()
(.95)^20
.95*.02
.02*.05
.98*.03
.97*.98
.9506+.0294+.001+.019
.0294/(.0294+.019)
pnorm(.975)
pnorm(1.96)
pnorm(1,sd=2)
qnorm(.8)
pnorm(.84)
19.6/4.16
4.711^2
10/sqrt(23)
2.085144*1.96
5-4.086882
pnorm(.913118,sd=2.085144)
pnorm(.913118)
qnorm(.8)
(19.6/2.16)^2
10/sqrt(83)
1.0976*1.96
pnorm(.85)
library(UsingR)
data("father.son",package="UsingR")
mean(father.son$sheight)
str(father.son)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
summary(father.son)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight,na.rm=TRUE)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
mean(father.son$sheight)
?mean
library(dplyr)
father.son %>%
filter(round(fheight,0)==71) %>%
max(sheight)
ibrary(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
summary(fH71)
library(dplyr)
fH71<-father.son %>%
filter(fheight>71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
mean(fH71$sheight)
fH71<-father.son %>%
filter(round(fheight,0)==71)
mean(fH71$sheight)
library(dplyr)
fH71<-father.son %>%
filter(round(fheight,0)==71) %>%
summarize(mean(sheight))
father.son %>%
filter(round(fheight,0)==71) %>%
summarize(mean(sheight))
x1=seq(1,10,1)
X=cbind(x1,2*x1,3*x1,4*x1,5*x1)
sum(X[7,])
x1=1:10
X=cbind(x1,2*x1,3*x1,4*x1,5*x1)
sum(X[7,])
matrix(1:60,20,3)
matrix(1:60,20,3,byrow=TRUE)
?%8%
?%*%
X=matrix(100,20,5)
X
X=matrix(seq(1,100),20,5)
X=matrix(seq(1,100),20,5)
X
X %*% matrix(1,ncol(X) )
X%*%diag(ncol(X))
diag(ncol(X))
diag(X)
?diag
X
diag(X)
diag(ncol(X))
diag(5)
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
nx<-5
ny<-7
X = cbind(rep(1,nx + ny),rep(c(0,1),c(nx, ny)))
X
crossprod(X)
XtX = t(X) %*% X
XtX[ 1,1 ]
XtX
setwd("C:/Users/Mike/Rspace/PH525/2x-Linear-Models-and-Matrix-Algebra/Code")
source('C:/Users/Mike/Rspace/PH525/2x-Linear-Models-and-Matrix-Algebra/Code/PH525-2x-Week4Ex contrasts.R', echo=TRUE)
model.matrix(~ species + condition)
library(contrast)
list.of.packages <- c("contrast", "UsingR")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(contrast)
list.of.packages <- c("contrast", "UsingR")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(contrast)
list.of.packages <- c("contrast", "UsingR","rafalib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(rafalib)
X<-model.matrix(~ species + condition)
imagemat(X)
fitSC <- lm(X)
summary(fitSC)
SCdata=cbind(species,condition)
fitSC <- lm(X,data=SCdata)
y = rnorm(4)
fit = lm(y ~ species + condition)
contrast(fit, list(species="B",condition="control"), list(species="A",condition="treated"))$X
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
fitTL <- lm(friction ~ type + leg, data=spider)
summary(fitTL)
(coefs <- coef(fitTL))
coefs <- coef(fitTL)
coefs
Y <- spider$friction
X <- model.matrix(~ type + leg, data=spider)
beta.hat <- solve(t(X) %*% X) %*% t(X) %*% Y
t(beta.hat)
coefs
library(contrast) #Available from CRAN
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
L3vsL2
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
Sigma.hat <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X)
signif(Sigma.hat, 2)
sqrt(cT %*% Sigma.hat %*% t(cT))
(cT <- L4vsL2$X)
sqrt(cT %*% Sigma.hat %*% t(cT))
L4vsL2$SE
X <- model.matrix(~ type + leg, data=spider)
(Sigma <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X))
C <- matrix(c(0,0,-1,0,1),1,5)
Y <- spider$friction
X <- model.matrix(~ type + leg, data=spider)
beta.hat <- solve(t(X) %*% X) %*% t(X) %*% Y
t(beta.hat)
coefs
library(contrast) #Available from CRAN
L3vsL2 <- contrast(fitTL,list(leg="L3",type="pull"),list(leg="L2",type="pull"))
L3vsL2
L4vsL2 <- contrast(fitTL,list(leg="L4",type="pull"),list(leg="L2",type="pull"))
L4vsL2
Sigma.hat <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X)
signif(Sigma.hat, 2)
(cT <- L4vsL2$X)
sqrt(cT %*% Sigma.hat %*% t(cT))
L4vsL2$SE
X <- model.matrix(~ type + leg, data=spider)
(Sigma <- sum(fitTL$residuals^2)/(nrow(X) - ncol(X)) * solve(t(X) %*% X))
C <- matrix(c(0,0,-1,0,1),1,5)
# Using Sigma, what is Cov(beta-hat_L4, beta-hat_L2)?
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
spider$log2friction <- log2(spider$friction)
boxplot(log2friction ~ type*leg, data=spider)
fitlogLM<-lm(log2friction~type*leg)
fitlogLM<-lm(log2friction~type*leg,data=spider)
spider$log2friction <- log2(spider$friction)
boxplot(log2friction ~ type*leg, data=spider)
fitlogLM<-lm(log2friction~type*leg,data=spider)
fitlogLM
summary(fitlogLM)
fitlogInt<-lm(log2friction~type:leg,data=spider)
summary(fitlogInt)
anova(fitlogLM)
.09967+1.20656
coef(fitlogLM)["legL2"]
library(contrast)
L2push.vs.L1push <- contrast(fitlogLM,
L2push.vs.L1push <- contrast(fitlogLM,
list(leg="L2", type = "push"),
list(leg="L1", type = "push"))
L2push.vs.L1push
coef(fitlogLM)["legL2"] + coef(fitlogLM)["typepush:legL2"]
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
X <- model.matrix(~ group)
X
Y <- rnorm(N,mean=42,7)
# The base model we wil compare against is simply Y-hat = mean(Y),
# which we will call mu0, and the initial sum of squares is the
# Y values minus mu0:
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
s
group
after.group.ss
initial.ss
(group.ss <- initial.ss - after.group.ss)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
f.value
set.seed(1)
?replicate
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
X <- model.matrix(~ group)
numTrials<-1000
fFind<-function(){
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
group.ss <- initial.ss - after.group.ss
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
}
set.seed(1)
fF<-replicate(numTrials,fFind)
mean(fF)
head(fF)
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
X <- model.matrix(~ group)
numTrials<-1000
fFind<-function(){
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
group.ss <- initial.ss - after.group.ss
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
}
set.seed(1)
fF<-replicate(numTrials,fFind())
mean(fF)
hist(fF)
boxplot(fF)
N <- 40
p <- 4
group <- factor(rep(1:p,each=N/p))
X <- model.matrix(~ group)
numTrials<-1000
set.seed(1)
Fs=replicate(numTrials,{
Y <- rnorm(N,mean=42,7)
mu0 <- mean(Y)
initial.ss <- sum((Y - mu0)^2)
s <- split(Y, group)
after.group.ss <- sum(sapply(s, function(x) sum((x - mean(x))^2)))
group.ss <- initial.ss - after.group.ss
group.ms <- group.ss / (p - 1)
after.group.ms <- after.group.ss / (N - p)
f.value <- group.ms / after.group.ms
return(f.value)
})
mean(Fs)
hist(Fs, col="grey", border="white", breaks=50, freq=FALSE)
xs <- seq(from=0,to=6,length=100)
lines(xs, df(xs, df1 = p - 1, df2 = N - p), col="red")
Sex <- c(0,0,0,0,1,1,1,1)
A <-   c(1,1,0,0,0,0,0,0)
B <-   c(0,0,1,1,0,0,0,0)
C <-   c(0,0,0,0,1,1,0,0)
D <-   c(0,0,0,0,0,0,1,1)
X <- model.matrix(~Sex+A+B+C+D-1)
cat("ncol=",ncol(X),"rank=", qr(X)$rank,"\n")
X
model.matrix(~Sex+A+B+C+D)
Sex <- c(0,1,0,1,0,1,0,1)
A <-   c(1,1,0,0,0,0,0,0)
B <-   c(0,0,1,1,0,0,0,0)
C <-   c(0,0,0,0,1,1,0,0)
D <-   c(0,0,0,0,0,0,1,1)
X <- model.matrix(~Sex+A+B+C+D-1)
cat("ncol=",ncol(X),"rank=", qr(X)$rank,"\n")
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix( ~ sex + trt)
X
qr(X)$rank
sex <- factor(rep(c("female","male"),each=4))
trt <- factor(c("A","A","B","B","C","C","D","D"))
X <- model.matrix( ~ sex + trt)
qr(X)$rank
Y <- 1:8
a<-1
b<-2
makeYstar <- function(a,b) Y - X[,2] * a - X[,5] * b
fitTheRest <- function(a,b) {
Ystar <- makeYstar(a,b)
Xrest <- X[,-c(2,5)]
betarest <- solve(t(Xrest) %*% Xrest) %*% t(Xrest) %*% Ystar
residuals <- Ystar - Xrest %*% betarest
sum(residuals^2)
}
# What is the sum of squared residuals when the male coefficient is
# 1 and the D coefficient is 2, and the other coefficients are fit
# using the linear model solution?
fitTheRest(1,2)
expand.grid(1:3,1:3)
betas = expand.grid(-2:8,-2:8)
rss = apply(betas,1,function(x) fitTheRest(x[1],x[2]))
rss
betas
min(rss)
rssMin<-rss==2
rssMin
fitThe Rest(8,-2)
fitTheRest(8,-2)
fitTheRest(6,0)
fitTheRest(1,5)
## Note that all pairs add to 6
themin= min(rss)
betas[which(rss==themin),]
library(rafalib)
## plot the pairs what are minimum
themin=min(rss)
plot(betas[which(rss==themin),])
imagemat(X)
imagemat(rss)
list.of.packages <- c("contrast","rafalib")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(contrast)
library(rafalib)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/spider_wolff_gorb_2013.csv"
filename <- "spider_wolff_gorb_2013.csv"
library(downloader)
if (!file.exists(filename)) download(url, filename)
spider <- read.csv(filename, skip=1)
fit <- lm(friction ~ type + leg, data=spider)
Y <- matrix(spider$friction, ncol=1)
X <- model.matrix(~ type + leg, data=spider)
Y
X
QR <- qr(X)
Q <- qr.Q( QR )
R <- qr.R( QR )
(betahat <- backsolve(R, crossprod(Q,y) ) )
QR <- qr(X)
Q <- qr.Q( QR )
R <- qr.R( QR )
(betahat <- backsolve(R, crossprod(Q,Y) ) )
Q
Q[1,1]
R[1,1]
crossprod(Q,Y)[1,1]
solve(R)%*%crossprod(Q,Y)
(betahat <- backsolve(R, crossprod(Q,Y) ) )
betahat <- coef(fit)
