x<-IRanges(101,200)
narrow(x,start=20)
x<-IRanges(101,200)
x+25
x
x<-IRanges(c(1,11,21),c(3,15,27))
x
width(x)
x<-IRanges(c(1,11,21),c(3,15,27))
x
width(x)
sum(width(x))
Starts<-c(101,106,201,211,221,301,306,311,351,361,401,411,501)
Ends<-c(150,160,210,270,225,310,310,330,390,380,415,470,510)
x<-IRanges(Starts,Ends)
x
width(x)
sum(width(x))
library(ph525x)
install_github("genomicsclass/ph525x")
library(ph525x)
?plotRanges
?"ph525x"
ph525x()
plotRanges(x)
gaps(x)
sum(gaps(x)$width)
sum(width(gaps(x))
sum(width(gaps(x)))
range(x)
disjoin(x)
length(disjoin(x))
par(mfrow=c(2,1))
plot(x)
plot(resize(x,1))
x
resize(x,1)
plotRanges(x)
plotRanges(resize(x,1))
par(mfrow=c(2,1))
plotRanges(x)
plotRanges(resize(x,1))
?resize
resize(x,1)
x
library(raflib)
par(mfrow=c(2,1))
plotRanges(x)
plotRanges(resize(x,1))
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
plotGRanges(resize(x,1)
)
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
plotGRanges(resize(x,1)
plotGRanges(x)
plotGRanges(resize(x,1))
library(raflib)
par(mfrow=c(2,1))
plotRanges(x)
plotRanges(resize(x,1))
library(rafalib)
par(mfrow=c(2,1))
plotRanges(x)
plotRanges(resize(x,1))
library(rafalib)
par(mfrow=c(2,1))
plotRanges(x)
plotRanges(resize(x,1))
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
plotGRanges(resize(x,1))
plotGRanges = function(x) plotRanges(ranges(x))
plotGRanges(x)
library(rafalib)
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(resize(x,1))
x = GRanges("chr1", IRanges(c(1,101),c(50,150)), strand=c("+","-"))
ranges(x)
plotGRanges = function(x) plotRanges(ranges(x))
library(rafalib)
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(resize(x,1))
x
x
x = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="+")
y = GRanges("chr1", IRanges(c(101,221,301,401,541),c(150,250,350,470,550)), strand="+")
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(y)
GRangesList(x,y)
c(x,y)
disjoin(c(x,y))
a<-disjoin(c(x,y))
plotGRanges(a)
?disjoin
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(y)
width(a)
sum(width(a))
plotGRanges(a)
?%over%
?"%over%"
x %over% y
sum(width(x))+sum(width(x))
plotGRanges(x)
plotGRanges(x)
plotGRanges(y)
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(y)
sum(width(x))+sum(width(y))
x = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="+")
y = GRanges("chr1", IRanges(c(101,221,301,401,541),c(150,250,350,470,550)), strand="+")
t
t
sum(width(x))+sum(width(y))
a<-disjoin(c(x,y))
sum(width(a))
a
plotGRanges(a)
width(a)
b<- x %over% y
b
par(mfrow=c(2,1))
plotGRanges(x)
plotGRanges(y)
plotGRanges(y,main="y")
a
x
y
sum(width(x))+sum(width(y))-sum(width(a))
disjoined<-disjoin(c(x,y))
b<- x %over% y
sum(width(disjoined))
sum(width(x))+sum(width(y))-sum(width(disjoined))
disjoined = disjoin(c(x,y))
in.both = disjoined %over% x & disjoined %over% y
sum(width(disjoined[ in.both ]))
sum(width(disjoined[ !in.both ]))
x
y
range(ranges(x))
x
z = GRanges("chr1", IRanges(c(101,201,401,501),c(150,250,450,550)), strand="-")
x %over% z
z = GRanges("chr1", range(ranges(x)), strand="-")
z
sum(x %over% z)
library(ERBS)
data(HepG2)
data(GM12878)
HepG2
HepG2[17]
distanceToNearest(HepG2[17])
distanceToNearest(HepG2)[17]
start(HepG2)[17]-start(HepG2)[53]
start(HepG2)[53]
distanceToNearest
?distanceToNearest
distanceToNearest((HepG2)[17],GM12878)
start(GM12878)[945]
start(HepG2)[17]
start(HepG2)[17]-start(GM12878)[945]
start(HepG2)[17]-end(GM12878)[945]
library(ERBS)
data(HepG2)
data(GM12878)
start(HepG2)[17]
d = distanceToNearest(HepG2[17],GM12878)
i = subjectHits(d)
start(GM12878[i])
?distanceToNearest
class(d)
d
d = distanceToNearest(HepG2[17],GM12878)
mcols(d)$distance
HepG2
length(HepG2)
regions<-seq(1:length(HepG2))
a<-sapply(regions,function(x){
distanceToNearest(HepG2[x],GM12878)
mcols(d)$distance
})
a
regions<-seq(1:length(HepG2))
a<-sapply(regions,function(x){
d<-distanceToNearest(HepG2[x],GM12878)
mcols(d)$distance
})
a
length(a)
length(a[a<2000])
length(a[a<2000])+length(a[a>=2000])
length(a[a<2000])/length(a)
d = distanceToNearest(HepG2,GM12878)
mean( mcols(d)$distance < 2000)
d
.332/.3-1
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
ghs
length(ghs)
genome(ghs)
length(ghs)
ghs
table(ghs$seqnames)
?query
class(ghs)
queryHits(gls)
queryHits(ghs)
table(ghs)
class(ghs)
str(ghs)
ghs@seqnames
max(ghs@seqnames)
table(ghs@seqnames)
order(table(ghs@seqnames))
ghs@seqnames[order(table(ghs@seqnames))]
ghs@seqnames[order(table(ghs@seqnames))[1]]
order(table(ghs@seqnames))
table(ghs@seqnames)
ghs@seqnames[order(ghs@seqnames)]
ghs@seqnames[order(ghs@seqnames)[1]]
table(ghs@seqnames)
which.max(table(ghs@seqnames))
hist(width(ghs))
hist(width(ghs),breaks=50)
length(ghs)
hist(width(ghs),breaks=100)
width(ghs)
summary(width(ghs))
w = width( ghs )
hist( w )
## the larger values are so much larger than the bulk of the data
## that we can barely see the frequencies of large values in the histogram
## the log transformation better shows how fat the right tail is:
hist( log10(w))
median(width(ghs))
library(GenomicFeatures)
library(GenomicRanges)
library(IRanges)
library(ERBS)
data(HepG2)
data(GM12878)
red<-findOverlaps(HepG2,GM12878)
res
class(res)
data(HepG2) # cell line of liver origin
data(GM12878) # immortalized B cell
red<-findOverlaps(HepG2,GM12878)
res
class(res)
res<-findOverlaps(HepG2,GM12878)
res
class(res)
res<-findOverlaps(HepG2,GM12878)
res
class(res) # a Hit, not a data frame
index<-queryHits(res)
erbs<-HepG2[index]
erbs
erbs<-granges(erbs) # extracts just the regions info.
erbs
library(Homo.sapiens)
ghs=genes(Homo.Sapiens)
ghs=genes(Homo.sapiens)
ghs
?precede
res=precede(erbs,ghs)
res
index=precede(erbs,ghs)
index
ghs[index[1:3]]
erbs[1:3]
ghs[index[1:3]]
res<-findOverlaps(HepG2,GM12878)
res
class(res) # a Hit, not a data frame
index<-queryHits(res)
erbs<-HepG2[index,]
erbs<-granges(erbs) # extracts just the regions info.
library(Homo.sapiens)
ghs=genes(Homo.sapiens)
ghs
index=precede(erbs,ghs)
index
ghs[index[1:3]] # Rafa got a different first gene.
erbs[1:3]
index=precede(erbs,ghs)
index
source('~/.active-rstudio-document', echo=TRUE)
#?precede
source('~/.active-rstudio-document', echo=TRUE)
erbs<-granges(erbs) # extracts just the regions info.
erbs
erbs
library(Homo.sapiens)
ghs=genes(Homo.sapiens)
index
index=precede(erbs,ghs)
index
ghs
index=precede(erbs,ghs)
index
index=precede(erbs,ghs)
index
erbs
?precede
index=precede(erbs,ghs,ignore.strand=FALSE)
index
ghs[index[1:3]] # Rafa got a different first gene.
erbs[1:3]
distance(erbs,ghs[index])
ghs
tssgr<-resizie(ghs,1)
tssgr<-resize(ghs,1)
tssgr
distanceToNearest(erbs,tssgr)
d
tssgr<-resize(ghs,1)
d<-distanceToNearest(erbs,tssgr)
d
queryHits(d)
values(d)$distance
hist(dists,nc=1000,xlim=c(0,100000))
queryHits(d)
dists<-values(d)$distance
hist(dists,nc=1000,xlim=c(0,100000))
index=subjectHits(d)[dist<1000]
index=subjectHits(d)[dists<1000]
index
tssgr[index,]
keytypes(Homo.sapiens)
values(tssgr[index])$GENEID
keys<-as.character(values(tssgr[index])$GENEID)
keys
columns(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c("SYMBOL","GENENAME"))
keys<-as.character(values(tssgr[index])$GENEID)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c("SYMBOL","GENENAME"))
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c("SYMBOL","GENENAME"))
res[1:2,]
identical(erbs,erbs2)
res = findOverlaps(HepG2,GM12878)
erbs = HepG2[queryHits(res)]
erbs = granges(erbs)
erbs2= intersect(HepG2,GM12878)
identical(erbs,erbs2)
## first order them
erbs3 = erbs[order(erbs),]
##confirm same chr
all( seqnames(erbs2)==seqnames(erbs3) )
mean( start(erbs2)==start(erbs3) & end(erbs2)==end(erbs3) )
##the intersection should be smaller
all( width(erbs2) <= width(erbs3) )
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
ghs
tssgr<-resize(ghs,1)
values(tssgr[index])$GENEID
tssgr<-resize(ghs,1)
tssgr
values(tssgr[index])$start
values(tssgr[index])$ranges
values(tssgr)$ranges
values(tssgr)$GENEID
index=values(tssgr)$GENEID==100113402
index
tssgr(start)
tssgr[index]
tssgr[index,]
index=which.values(tssgr)$GENEID==100113402
index=which(values(tssgr)$GENEID==100113402)
index
tssgr[100113402,]
tssgr["100113402",]
start(tssgr["100113402",])
start(tssgr["100113402"])
library(ERBS)
data(HepG2)
data(GM12878)
res = findOverlaps(HepG2,GM12878)
erbs = HepG2[queryHits(res)]
erbs = granges(erbs)
erbs
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
ghs[index[1:4]]
erbs[4]
tss
tssgr
start(tssgr)
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
ghs[index[1:4]]
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
d<-distanceToNearest(erbs,tssgr)
d
tssgr
erbs
?"distance"
tssgr[6316]
erbs[4]
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
mcols(tssgr)$GENEID[i]
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
mcols(tssgr)$GENEID[i]
i
mcols(tssgr)$GENEID[i]
tssgr[i]
tssgr[index,]
keys<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c"SYMBOL")
res[1:2,]
tssgr[index,]
keys<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns="SYMBOL")
res[1:2,]
tssgr[index,]
keys<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns="SYMBOL")
res
tssgr[index,]
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",columns="SYMBOL")
res
tssgr[index,]
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
gene<-as.character(values(tssgr[i])$GENEID)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=4*k*U0/(rho*beta*H*r)
vmax
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=k*U0*pi/(rho*beta*H*L)
vmax
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=k*U0*pi/(rho*beta*H*L)
vmax
vmax*50
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
setwd("C:/Users/Mike/Rspace/PH525/6x/Week 1")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sig5 = c("IL26", "ZNF674", "UBC.1", "C7orf25.1", "RPS13")
library(MLInterfaces)
library(randomForest)
set.seed(1234)
rf2 = MLearn(Tissue~., tgeES[sig5,], randomForestI, xvalSpec("NOTEST"))
RObject(rf2)
