index=precede(erbs,ghs)
index
ghs
index=precede(erbs,ghs)
index
index=precede(erbs,ghs)
index
erbs
?precede
index=precede(erbs,ghs,ignore.strand=FALSE)
index
ghs[index[1:3]] # Rafa got a different first gene.
erbs[1:3]
distance(erbs,ghs[index])
ghs
tssgr<-resizie(ghs,1)
tssgr<-resize(ghs,1)
tssgr
distanceToNearest(erbs,tssgr)
d
tssgr<-resize(ghs,1)
d<-distanceToNearest(erbs,tssgr)
d
queryHits(d)
values(d)$distance
hist(dists,nc=1000,xlim=c(0,100000))
queryHits(d)
dists<-values(d)$distance
hist(dists,nc=1000,xlim=c(0,100000))
index=subjectHits(d)[dist<1000]
index=subjectHits(d)[dists<1000]
index
tssgr[index,]
keytypes(Homo.sapiens)
values(tssgr[index])$GENEID
keys<-as.character(values(tssgr[index])$GENEID)
keys
columns(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c("SYMBOL","GENENAME"))
keys<-as.character(values(tssgr[index])$GENEID)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c("SYMBOL","GENENAME"))
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c("SYMBOL","GENENAME"))
res[1:2,]
identical(erbs,erbs2)
res = findOverlaps(HepG2,GM12878)
erbs = HepG2[queryHits(res)]
erbs = granges(erbs)
erbs2= intersect(HepG2,GM12878)
identical(erbs,erbs2)
## first order them
erbs3 = erbs[order(erbs),]
##confirm same chr
all( seqnames(erbs2)==seqnames(erbs3) )
mean( start(erbs2)==start(erbs3) & end(erbs2)==end(erbs3) )
##the intersection should be smaller
all( width(erbs2) <= width(erbs3) )
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
ghs
tssgr<-resize(ghs,1)
values(tssgr[index])$GENEID
tssgr<-resize(ghs,1)
tssgr
values(tssgr[index])$start
values(tssgr[index])$ranges
values(tssgr)$ranges
values(tssgr)$GENEID
index=values(tssgr)$GENEID==100113402
index
tssgr(start)
tssgr[index]
tssgr[index,]
index=which.values(tssgr)$GENEID==100113402
index=which(values(tssgr)$GENEID==100113402)
index
tssgr[100113402,]
tssgr["100113402",]
start(tssgr["100113402",])
start(tssgr["100113402"])
library(ERBS)
data(HepG2)
data(GM12878)
res = findOverlaps(HepG2,GM12878)
erbs = HepG2[queryHits(res)]
erbs = granges(erbs)
erbs
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
ghs[index[1:4]]
erbs[4]
tss
tssgr
start(tssgr)
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
ghs[index[1:4]]
index=precede(erbs,tssgr,ignore.strand=FALSE)
index
d<-distanceToNearest(erbs,tssgr)
d
tssgr
erbs
?"distance"
tssgr[6316]
erbs[4]
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
mcols(tssgr)$GENEID[i]
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
mcols(tssgr)$GENEID[i]
i
mcols(tssgr)$GENEID[i]
tssgr[i]
tssgr[index,]
keys<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns=c"SYMBOL")
res[1:2,]
tssgr[index,]
keys<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns="SYMBOL")
res[1:2,]
tssgr[index,]
keys<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,keys=keys,keytype="GENEID",columns="SYMBOL")
res
tssgr[index,]
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",columns="SYMBOL")
res
tssgr[index,]
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
gene<-as.character(values(tssgr[i])$GENEID)
keytypes(Homo.sapiens)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
library(Homo.sapiens)
ghs = genes(Homo.sapiens)
tssgr= resize(ghs,1)
i = nearest(erbs[4],tssgr)
gene<-as.character(values(tssgr[i])$GENEID)
res=select(Homo.sapiens,key=gene,keytype="GENEID",column="SYMBOL")
res
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=4*k*U0/(rho*beta*H*r)
vmax
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=k*U0*pi/(rho*beta*H*L)
vmax
U0=10
beta=1.2e-11
k=0.01
r=6.37e6
rho=1000
H=2000
lat=45
L=(lat/360)*2*pi*r
vmax=k*U0*pi/(rho*beta*H*L)
vmax
vmax*50
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
library(GenomicRanges)
load("h2bw.rda")
system.time( lapply(1:8, function(x)Sys.sleep(1) ) )
system.time( lapply(1:16, function(x)Sys.sleep(1) ) )
system.time( lapply(1:4, function(x)Sys.sleep(1) ) )
detect.cores()
library(parallel)
detectCores()
mc.cores()
?"options"
?"parallel"
options(mc.cores=4)
system.time( mclapply(1:8, function(x)Sys.sleep(1) ) )
options(mc.cores=2)
system.time( mclapply(1:8, function(x)Sys.sleep(1) ) )
BiocParallel::bpparam()
library(BiocParallel)
bpparam()
32/15
library(BatchJobs)  # sequential by default
reg1 = makeRegistry("tmp1", packages=c("RNAseqData.HNRNPC.bam.chr14", "GenomicAlignments", "Rsamtools"))
library(RNAseqData.HNRNPC.bam.chr14)
fns = RNAseqData.HNRNPC.bam.chr14_BAMFILES
batchMap(reg1, readGAlignments, fns)
submitJobs(reg1, 1)
waitForJobs(reg1)
length(loadResult(reg1, 1))
length(loadResult(reg1, 1))
submitJobs(reg1, findNotDone(reg1))
waitForJobs(reg1)
getJobInfo(reg1)
getJobInfo(reg1)$memory
getJobInfo(reg1)
median(getJobInfo(reg1)$memory)
lens = reduceResults( reg1, fun= function(aggr, job, res)
c(aggr, length(res)), init=NULL)
lens
sum(lens)
library(GO.db)
GO.db
keytypes(GO.db)
columns(GO.db)
class(GO.db)
getClass(class(GO.db))
getClass(class(GO.db))
con=GO.db$conn
con
library(DBI)
library(RSQLite)
dbListTables(con)
dbGetQuery(con,select * from go_term limit 5)
dbGetQuery(con,"select * from go_term limit 5")
library(GO.db)
con = GO.db$conn
dbGetQuery(con, "select count(*) from go_term")
dbGetQuery(GO.db$conn, "select term from go_term")
keys(GO.db, keytype="TERM")
library(microbenchmark)
m1 = microbenchmark(
dbGetQuery(GO.db$conn, "select term from go_term"), times=10L, unit="ms")
m2 = microbenchmark(
keys(GO.db, keytype="TERM"), times=10L, unit="ms")
biocLite("microbenchmark")
source("http://www.bioconductor.org/biocLite.R")
biocLite()
library(BiocInstaller)
biocLite("microbenchmark")
library(microbenchmark)
m1 = microbenchmark(
dbGetQuery(GO.db$conn, "select term from go_term"), times=10L, unit="ms")
m2 = microbenchmark(
keys(GO.db, keytype="TERM"), times=10L, unit="ms")
m1
m1$median
str(m1)
summary(m1)
m1[5]
m1[5,2]
median(m1$time)
median(m2$time)/median(m1$time)
summary(m2)[,"median"]/summary(m1)[,"median"]
library(RNAseqData.HNRNPC.bam.chr14)
library(GenomicAlignments)
library(ERBS)
data(GM12878)
seqlevels(GM12878, force=TRUE) = "chr14"
library(Rsamtools)
parm = ScanBamParam(which=GM12878)
tab = summarizeOverlaps( GM12878, RNAseqData.HNRNPC.bam.chr14_BAMFILES,
param=parm)
tab
sum(tab)
str(tab)
ranges(tab)
ranges(tab)[1:51]
summary(tab)
width(tab)
?summarizeOverlaps
parm
queryHits(tab)
RNAseqData.HNRNPC.bam.chr14_BAMFILES
parm
summary(parm)
ranges(parm)
tab
tab[,1]
colData(tab)
tab$ERR127306
tab[,2]
sum(tab[,2])
tab
str(tab)
score(tab)
seqnames(tab)
assays(tab)
assays(tab)[[1]]
assays(tab)[[1]][1,]
regions=1:51
regions
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
zeros
sum(zeros)
sum(apply(assay(tab),1,function(x)all(x==0)))
regions=1:51
zeros<-sapply(regions, function (x) {
sum(assays(tab)[[1]][x,])==0
})
sum(zeros)
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
kk
class(kk)
?scanBam
mm
bf
tab[5]
rowRanges(tab)[5]
rowRanges(tab)[51]
rowRanges(tab)[52]
rowRanges(tab)[5]
mm
sum(apply(assay(tab)[5],1,function(x)sum(x)))
assay(tab[5])
kk
str(kk)
mean(kk$mapq)
kk$mapq
kk[[1]]$mapq
sum(assay(tab[5])
)
mean(kk[[1]]$mapq)
mm = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf[1], param=mm)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
assay(tab[30])
kk30[[1]]$mapq
kk30[1]$mapq
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
sum(assay(tab[5]))
mean(kk[[1]]$mapq)
kk
kk30
kk30[1]
kk30[2]
kk30[1][1]
kk30[1][2]
kk30[2][1]
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
sum(assay(tab[30]))
mean(kk30[[1]]$mapq)
bf[1]
assays(tab[5])
assay(tab[5])
mm = ScanBamParam(which=rowRanges(tab)[5], what="mapq")
bf = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk = scanBam(bf[1], param=mm)
assay(tab[5])[1]
mean(kk[[1]]$mapq)
mm30 = ScanBamParam(which=rowRanges(tab)[30], what="mapq")
bf30 = RNAseqData.HNRNPC.bam.chr14_BAMFILES
kk30 = scanBam(bf30[1], param=mm30)
assay(tab[30])[1]
mean(kk30[[1]]$mapq)
kk30
kk
countBam(bf[1], param=mm)
countBam(bf[1], param=mm30)
library(geuvPack)
library(VariantAnnotation)
gtpath
biocLite("geuvPack")
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
```
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
library(ph525x)
b1 = benchOOM()
library(BiocInstaller)
biocLite("rhdf5")
library(ph525x)
b1 = benchOOM()
biocLite("bigmemory")
library(ph525x)
library(rhdf5)
library(bigmemory)
b1 = benchOOM()
b1
b1
b1$wr
b1$meth[which.min(b1$wr)]
h22 = scanVcfHeader(gtpath(22))
h22
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
mean( h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4)))
h5read("ex_hdf5file.h5", "x", index=list(1:4,1:4))
h5read("ex_hdf5file.h5", "x")
h22 = scanVcfHeader(gtpath(22))
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
h22 = scanVcfHeader(gtpath(22))
setwd("C:/Users/Mike/Rspace/PH525/6x/Week Third")
setwd("C:/Users/Mike/Rspace/PH525/6x/Week 2 Scalable analysis")
library(geuvPack)
library(VariantAnnotation)
gtpath
h22 = scanVcfHeader(gtpath(22))
setwd("C:/Users/Mike/Rspace/PH525/6x/Week Third")
source('~/.active-rstudio-document', echo=TRUE)
select(hugene10sttranscriptcluster.db,keys="NUPR1",keytype="SYMBOL",columns="PROBEID")
library(annotate)
library(hugene10sttranscriptcluster.db)
select(hugene10sttranscriptcluster.db,keys="NUPR1",keytype="SYMBOL",columns="PROBEID")
library(annotate)
library(hugene10sttranscriptcluster.db)
annodb <- "hugene10sttranscriptcluster.db"
ID     <- featureNames(pc1)
Symbol <- as.character(lookUp(ID, annodb, "SYMBOL"))
Name   <- as.character(lookUp(ID, annodb, "GENENAME"))
Entrez <- as.character(lookUp(ID, annodb, "ENTREZID"))
ID[Symbol=="NUPR1"]
pc1[[1]]$data_processing
x=TRUE
td0<-mean(exprs(pset)[,7],rm.na=x)-mean(exprs(pset)[,11],na.rm=x)
td3<-mean(exprs(pset)[,8],rm.na=x)-mean(exprs(pset)[,12],na.rm=x)
td6<-mean(exprs(pset)[,9],na.rm=x)-mean(exprs(pset)[,13],na.rm=x)
#td9<-mean(mean(cbind(exprs(pset)[,1],exprs(pset)[,10])),na.rm=TRUE)-mean(exprs(pset)[,14],na.rm=TRUE)
td9<-mean(mean(exprs(pset)[,10]),na.rm=x)-mean(exprs(pset)[,14],na.rm=x)
tds<-c(td0,td3,td6,td9)
tds
shapiro.test(tds)$p.value
x=FALSE
td0<-mean(exprs(pset)[,7],rm.na=x)-mean(exprs(pset)[,11],na.rm=x)
td3<-mean(exprs(pset)[,8],rm.na=x)-mean(exprs(pset)[,12],na.rm=x)
td6<-mean(exprs(pset)[,9],na.rm=x)-mean(exprs(pset)[,13],na.rm=x)
#td9<-mean(mean(cbind(exprs(pset)[,1],exprs(pset)[,10])),na.rm=TRUE)-mean(exprs(pset)[,14],na.rm=TRUE)
td9<-mean(mean(exprs(pset)[,10]),na.rm=x)-mean(exprs(pset)[,14],na.rm=x)
tds<-c(td0,td3,td6,td9)
tds
shapiro.test(tds)$p.value
sins<-rbind(exprs(pset)[,7],exprs(pset)[,8],exprs(pset)[,9],exprs(pset)[,10])
nups<-rbind(exprs(pset)[,11],exprs(pset)[,12],exprs(pset)[,13],exprs(pset)[,14])
t.test(sins,nups,paired=TRUE)
eshift=nups-sins
t.test(eshift)
length(nups)/4
eshift = exprs(pcl)["8000574", 7:10] - exprs(pcl)["8000574", 11:14]
eshift = exprs(pset)["8000574", 7:10] - exprs(pset)["8000574", 11:14]
shapiro.test(eshift)
summary(eshift)
str(eshift)
eshift
tds
eshift2 = exprs(pset)[, 7:10] - exprs(pset)[, 11:14]
eshift2
library(annotate)
library(hugene10sttranscriptcluster.db)
select(hugene10sttranscriptcluster.db,keys="NUPR1",keytype="SYMBOL",columns="PROBEID")
summary(eshift2[,1])
names(eshift2)
colnames(eshift2)
rownames(eshift2)
""8000574" %in% rownames(eshit2)
"8000574" %in% rownames(eshit2)
"8000574" %in% rownames(eshift2)
t.test(eshift)
h22 = scanVcfHeader(gtpath(22))
